I" <h1 id="chapter-04-프로세서-구조">Chapter 04. 프로세서 구조</h1>
<ul>
  <li>4.1 Y86-64 인스트럭션 집합 구조</li>
  <li>4.2 논리 설계와 하드웨어 제어 언어 HCL</li>
  <li>4.3 순차적sequential Y86-64 구현</li>
</ul>

<h1 id="43-순차적sequential-y86-64-구현">4.3 순차적sequential Y86-64 구현</h1>

<ul>
  <li>SEQ : sequential 프로세서를 의미</li>
  <li>매 클럭 사이클에 SEQ는 한 개의 완전한 인스트럭션을 처리하는 데 필요한 모든 단계를 수행한다.</li>
  <li>SEQ를 개발하는 목적은 효율적인 파이프라인 프로세서를 만들려는 우리의 최종목표로 가는 첫 단계이다.</li>
</ul>

<h2 id="431-작업을-단계로-구성하기">4.3.1 작업을 단계로 구성하기</h2>

<ul>
  <li>인스트럭션을 처리하는 데는 다수의 연산이 관련되어 있다.</li>
  <li>이들은 특정한 단계들Stages로 구성해서 비록 인스트럭션들의 동작은 다를지라도 모든 인스트럭션들이 일정한 순서를 따르도록 한다.</li>
  <li>각 단계에서의 세부 처리내용은 실행하는 인스트럭션에 따라 달라진다.
    <ol>
      <li>선입 fetch: 프로그램 카운터 PC를 메모리주소로 사용해서 메모리로부터 인스트럭션 바이트들을 읽어들인다. icode(인스트럭션 코드)와 ifun(instruction function)을 추출한다.
한 개의 레지스터 지시자 바이트를 선입해서 한 개 또는 두 개의 레지스터 오퍼랜드 지시자 rA와 rB를 얻어내는 경우도 있다. 또한 8바이트 상수 워드 valC를 선입할 수도 있다. 이것은
 지금 실행 중인 인스트럭션의 순차적인 다음 인시트럭션의 주소가 되는 valP를 계산한다.</li>
    </ol>
  </li>
</ul>

<ol>
  <li></li>
</ol>
:ET