I"}:<h1 id="이코테">이코테</h1>

<h2 id="그리디-무지의-먹방-라이브---2019-카카오-문제python">그리디 무지의 먹방 라이브 - 2019 카카오 문제(Python)</h2>

<h2 id="문제">문제</h2>

<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42891#qna">문제로 이동!</a></p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>k만큼 반복문을 돌며 0을 만나면 패스하고 0이 아닌 값을 만나면 인자와 k값을 -1씩 하는 방식으로 처음 문제를 접근했다.
index 접근은 array의 길이만큼 나눈 나머지로 접근함으로써 반복문 하나로 접근하였지만, 시간초과로 문제를 풀지 못하였다.</p>

  <p>답지에서는 우선순위큐로 접근하였다. 다 먹는데 가장 적게 걸리는 음식들을 순서로 접근하였고, 이 때 하나의 음식을 다 먹는 시간이 k보다 커지면 반복문을 탈출하고
남은 값들 중에서 정답을 도출하였다.</p>
</blockquote>

<h3 id="solution2fail">solution2(fail)</h3>
<ol>
  <li>k&gt;0 인 조건에서 while문을 돈다.</li>
  <li>index를 1씩 증가하고 index를 array의 length로 나눈 나머지로 배열에 접근한다.</li>
  <li>0이면 continue, 1이면 k와 인자를 -1씩 해준다.</li>
  <li>탈출 시 index로 배열에 접근하여 해당 값이 0이 아니라면 index+1(음식은 1부터 시작)로 return 한다.</li>
  <li>0일 경우 한바퀴를 돌면서 해당 index부터 순서로 0보다 큰 값을 찾는다.</li>
  <li>한바퀴가 돌아도 찾아지지 않는다면 -1로 return, 찾아졌다면 해당 index로 return</li>
</ol>

<h3 id="solution3solved">solution3(solved)</h3>
<ol>
  <li>array의 총합이 k보다 적으면 -1로 우선 return 하여준다.</li>
  <li>(array의 값, array의 인덱스)로 값을 기준으로 정렬하여 우선순위큐에 넣어준다.</li>
  <li>(현재 먹은 음식과 이전에 먹은 음식의 차이)와 (현재 배열의 길이) 를 곱하고 (이전 반복문까지 더해졌던 sum_value)와 더해서 k보다 커지면 반복문을 탈출한다.
    <ul>
      <li>위의 값이 k보다 크다면, 더이상 음식을 다 먹을 수 있는 경우가 아니기 때문에 반복문을 탈출하고 남은 횟수만큼 인덱스를 더해 결과를 도출한다.</li>
    </ul>
  </li>
  <li>반복문을 탈출했다면, 다시 인덱스 기준으로 정렬하고 결과값을 찾는다.</li>
</ol>

<blockquote>
  <p>처음 문제를 풀었을 때 문제에서 순차적으로 접근하는 것 처럼 설명이 되어 있어 순차적으로 접근하면서 푸는 방법이 맞는 방법이라고 생각했다.
하지만, 문제에 대해 조금 더 생각했더라면, 우선순위큐를 생각할 수 있었을 것 같다. 다양한 유형을 풀어본다면, 어떤 유형으로 풀 수 있는 지에 대한 생각의 폭이 넓어질 것 같다.</p>
</blockquote>

<h2 id="새로-알게된-문법">새로 알게된 문법</h2>
<blockquote>
  <p>solution1을 풀 때 리스트 컴프리헨션의 조건문에 대한 새로운 문법을 알게 되었다.</p>
</blockquote>

<ol>
  <li>조건문이 뒤에 있을 때 : 조건문에 해당 하는 값 i만 추가</li>
</ol>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">array</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span></code></pre></figure>

<ol>
  <li>조건문이 앞에 있을 때 : if에 해당하는 값은 i, 아니면 else 뒤에 있는 값으로 추가</li>
</ol>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">[</span><span class="n">i</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">array</span><span class="p">]</span></code></pre></figure>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python">    <span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">food_times</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">food_times</span><span class="p">)</span>
        <span class="n">quotient</span> <span class="o">=</span> <span class="n">k</span> <span class="o">//</span> <span class="n">length</span>
        <span class="n">remainder</span> <span class="o">=</span> <span class="n">k</span> <span class="o">%</span> <span class="n">length</span>
        <span class="n">food_times</span> <span class="o">=</span> <span class="p">[</span><span class="n">v</span><span class="o">-</span><span class="n">quotient</span><span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">remainder</span> <span class="k">else</span> <span class="n">v</span><span class="o">-</span><span class="n">quotient</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">food_times</span><span class="p">)]</span>
        <span class="n">time_sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">food_times</span> <span class="k">if</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">remainder</span> <span class="o">+</span> <span class="n">time_sum</span><span class="p">)</span> <span class="o">%</span> <span class="n">length</span>
        <span class="k">if</span> <span class="n">food_times</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">food_times</span><span class="p">[</span><span class="n">index</span><span class="p">:]):</span>
                <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">index</span>
    
    
    <span class="k">def</span> <span class="nf">solution2</span><span class="p">(</span><span class="n">food_times</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">food_times</span><span class="p">)</span>
        <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">food_times</span><span class="p">[</span><span class="n">index</span> <span class="o">%</span> <span class="n">length</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">food_times</span><span class="p">[</span><span class="n">index</span> <span class="o">%</span> <span class="n">length</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>
    
        <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">length</span>
    
        <span class="k">if</span> <span class="n">food_times</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">food_times</span><span class="p">[(</span><span class="n">index</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="k">return</span> <span class="p">(</span><span class="n">index</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
    
        <span class="k">return</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span>
    
    
    <span class="k">def</span> <span class="nf">solution3</span><span class="p">(</span><span class="n">food_times</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="kn">import</span> <span class="nn">heapq</span>
    
        <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">food_times</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
    
        <span class="n">q</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">food_times</span><span class="p">)):</span>
            <span class="n">heapq</span><span class="p">.</span><span class="n">heappush</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="p">(</span><span class="n">food_times</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
    
        <span class="n">sum_value</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">previous</span> <span class="o">=</span> <span class="mi">0</span>
    
        <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">food_times</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">sum_value</span> <span class="o">+</span> <span class="p">((</span><span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">previous</span><span class="p">)</span> <span class="o">*</span> <span class="n">length</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">:</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="n">heappop</span><span class="p">(</span><span class="n">q</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">sum_value</span> <span class="o">+=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">previous</span><span class="p">)</span> <span class="o">*</span> <span class="n">length</span>
            <span class="n">length</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">previous</span> <span class="o">=</span> <span class="n">now</span>
    
        <span class="n">result</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">[(</span><span class="n">k</span> <span class="o">-</span> <span class="n">sum_value</span><span class="p">)</span> <span class="o">%</span> <span class="n">length</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
    
    
    <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
        <span class="n">food_times</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
        <span class="n">k</span> <span class="o">=</span> <span class="mi">12</span>
        <span class="k">print</span><span class="p">(</span><span class="n">solution3</span><span class="p">(</span><span class="n">food_times</span><span class="p">,</span><span class="n">k</span><span class="p">))</span></code></pre></figure>
:ET