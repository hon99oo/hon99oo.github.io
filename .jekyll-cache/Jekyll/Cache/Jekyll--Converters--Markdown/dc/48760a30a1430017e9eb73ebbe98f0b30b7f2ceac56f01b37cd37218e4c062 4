I"<h1 id="boj">BOJ</h1>

<h2 id="dp-1699-제곱수의-합">DP 1699 제곱수의 합</h2>

<p><a href="https://www.acmicpc.net/problem/1699">문제로 이동!</a></p>

<h2 id="문제">문제</h2>

<p>어떤 자연수 N은 그보다 작거나 같은 제곱수들의 합으로 나타낼 수 있다. 예를 들어 11=32+12+12(3개 항)이다. 이런 표현방법은 여러 가지가 될 수 있는데, 11의 경우 11=22+22+12+12+12(5개 항)도 가능하다. 이 경우, 수학자 숌크라테스는 “11은 3개 항의 제곱수 합으로 표현할 수 있다.”라고 말한다. 또한 11은 그보다 적은 항의 제곱수 합으로 표현할 수 없으므로, 11을 그 합으로써 표현할 수 있는 제곱수 항의 최소 개수는 3이다.</p>

<p>주어진 자연수 N을 이렇게 제곱수들의 합으로 표현할 때에 그 항의 최소개수를 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 자연수 N이 주어진다. (1 ≤ N ≤ 100,000)</p>

<h2 id="예제-입력">예제 입력</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python">    <span class="s">"""
    case 1:
    입력
    7
    출력
    4

    case 2:
    입력
    12
    출력
    3

    case 3:
    입력
    41
    출력
    2
    """</span></code></pre></figure>

<h2 id="풀이">풀이</h2>

<p>DP를 사용해서 풀었다. dp 테이블을 n+1만큼 0으로 초기화를 해준다. 1 부터 n 까지 순회하며 dp 테이블을 i로 업데이트 해준다.
이후 i까지 while 문을 한번 더 순회한다. while 문을 순회하는 이유는 제곱수를 조회하기 위해서이다. 현재 i에서 뺄 수 있는 제곱수를 탐색해서 i에 빼준 dp를 탐색한다. 이후 더 작은 값을 dp[i]에 추가해준다.</p>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python">    <span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
            <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">j</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">**</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">**</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
    
    
    <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
        <span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">(</span><span class="n">n</span><span class="p">))</span></code></pre></figure>
:ET