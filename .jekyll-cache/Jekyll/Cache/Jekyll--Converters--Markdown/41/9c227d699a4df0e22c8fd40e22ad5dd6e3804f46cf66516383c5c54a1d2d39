I"M<h1 id="1-주소-공간의-개념">1. 주소 공간의 개념</h1>

<h2 id="11-초기-시스템">1.1 초기 시스템</h2>
<ul>
  <li>메모리 관점에서 초기 컴퓨터는 많은 개념을 사용자에게 제공하지 않았다. 하지만, 시분할 시스템이 대중화 되면서 운영체제에게 새로운 요구 사항이 부과되었다. 여러 프로그램이
메모리에 동시에 존재하려면 <strong>보호(protection)</strong>가 중요한 문제가 된다.</li>
  <li>한 프로세스가 다른 프로세스의 메모리를 읽거나 혹은 더 안좋게는 쓸 수 있는 상황이 있어선 안된다.</li>
</ul>

<h2 id="12-주소-공간">1.2 주소 공간</h2>
<ul>
  <li>위 문제의 위험에 대비하기 위해 운영체제는 <strong>사용하기 쉬운(easy to use)</strong>메모리 개념을 만들어야 한다.
    <ul>
      <li>이 개념이 <strong>주소 공간(address space)</strong>이다.</li>
    </ul>
  </li>
  <li>주소 공간은 실행 프로그램의 모든 메모리 상태를 갖고 있다.
    <ul>
      <li>프로그램의 코드(code, 명령어): 메모리에 존재해야 하고 따라서 주소 공간에 존재한다.</li>
      <li>스택: 함수 호출 체인 상의 현재 위치, 지역 변수, 함수 인자와 반환 값 등을 저장하는 데 사용된다.</li>
      <li>힙: 동적으로 할당되는 메모리를 위해 사용된다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/ostep/04/img.png" width="50%" height="100%" /></p>
<ul>
  <li>위의 그림은 주소 공간의 예이다.
    <ul>
      <li>위의 그림처럼 실제로 프로그램이 물리 주소 0에서 16KB 사이에 존재하는 것은 아니다.실제로는 임의의 물리 주소에 탑재된다. 운영체제가 해당 일을 할 때 <strong>메모리를 가상화(virtualizing memory)</strong>한다고 말한다.</li>
      <li>즉, 메모리 가상화는 프로그램은 가상화된 주소를 사용하고 운영체제는 이 가상 주소를 실제 물리 메모리 주소로 변환하는 방식의 메커니즘을 가진다.</li>
    </ul>
  </li>
</ul>

<h2 id="13-가상-메모리-시스템vm의-목표">1.3 가상 메모리 시스템(VM)의 목표</h2>
<ul>
  <li>투명성(transparency): 운영체제는 실행 중인 프로그램이 가상 메모리의 존재를 인지하지 못하도록 가상 메모리 시스템을 구현해야 한다.</li>
  <li>효율성(efficiency): 운영체제는 가상화가 시간과 공간 측면에서 효율적이도록 해야 한다.</li>
  <li>보호(protection): 운영체제는 프로세스를 다른 프로세스로부터 보호해야 하고 운영체제 자신도 프로세스로부터 보호해야 한다.
    <ul>
      <li>보호 성질을 이용하여 프로세스들을 서로 <strong>격리(isolate)</strong>시킬 수 있다.</li>
    </ul>
  </li>
  <li>메모리를 가상화하기 위해 필요한 기본적인 <strong>기법</strong>과 <strong>정책</strong>이 있다.</li>
</ul>

<h1 id="2-주소-변환의-원리">2. 주소 변환의 원리</h1>
<ul>
  <li>메모리 가상화에서도 CPU 가상화 부분에서 제한적 직접 실행 기법과 비슷하게 약간의 하드웨어 지원을 받아 효율적인 가상화 제공 전략을 추구한다.</li>
  <li>메모리 가상화를 제공하는 동시에 효율성과 제어 모두를 추구한다.
    <ul>
      <li>효율성을 높이려면 하드웨어 지원을 활용할 수밖에 없다.</li>
      <li>제어는 응용 프로그램이 자기자신의 메모리 이외에는 다른 메모리에 접근하지 못한다는 것을 운영체제가 보장하는 것을 의미한다.</li>
      <li>마지막으로, 유연성(flexibility) 측면에서 VM 시스템에서 프로그래머가 원하는 대로 주소 공간을 사용하고, 프로그래밍하기 쉬운 시스템을 만들어야 한다.</li>
    </ul>
  </li>
</ul>

:ET