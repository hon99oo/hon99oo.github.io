I"e<h1 id="chapter-04-프로세서-구조">Chapter 04. 프로세서 구조</h1>
<ul>
  <li>4.1 Y86-64 인스트럭션 집합 구조</li>
  <li>4.2 논리 설계와 하드웨어 제어 언어 HCL</li>
</ul>

<h1 id="42-논리-설계와-하드웨어-제어-언어-hcl">4.2 논리 설계와 하드웨어 제어 언어 HCL</h1>

<ul>
  <li>하드웨어를 설계할 때 전자회로를 사용해서 비트들의 함수를 계산하고 여러 가지 메모리 원소들에 비트들을 저장한다.</li>
  <li>디지털 시스템을 만들기 위해서는 다음과 같은 세 개의 주요 컴포넌트가 있어야 한다.
    <ul>
      <li>비트연산을 위한 조합회로 combinational logic</li>
      <li>비트를 저장하는 메모리 소자</li>
      <li>메모리 소자의 갱신을 조절하는 클럭 신호</li>
    </ul>
  </li>
</ul>

<h2 id="421-논리-게이트">4.2.1 논리 게이트</h2>
<ul>
  <li>논리 게이트는 디지털 회로에서 기초 연산 소자들이다.</li>
  <li>아래의 그림은 AND, OR, NOT 논리 게이트의 유형이다. 각 게이트는 입력들의 불 함수 같은 출력을 만든다.</li>
</ul>

<p><img src="../../assets/img/csapp/13/img.png" width="60%" height="100%" /></p>

<h2 id="422-조합회로와-hcl-불-수식">4.2.2 조합회로와 HCL 불 수식</h2>

<ul>
  <li>여러 가지 논리 게이트를 모아서 네트워크를 만들면 조합회로라고 알려진 계산 블록을 만들 수 있다.</li>
  <li>어떻게 네트워크가 구성되는지와 관련해서 몇가지 제한이 있다.
    <ul>
      <li>모든 논리 게이트 입력은 정확히 다음 중의 하나에 연결되어야 한다.
        <ol>
          <li>시스템 입력중의 하나(주요입력이라고 알려진)</li>
          <li>일부 메모리 소자의 출력 연결</li>
          <li>일부 논리게이트의 출력</li>
        </ol>
      </li>
      <li>두 개 이상의 논리 게이트의 출력은 서로 연결될 수 없다.</li>
      <li>네트워크에는 순환회로가 없어야 한다.</li>
    </ul>
  </li>
  <li>아래의 그림은 비트 동일성을 시험하기 위한 조합회로이다. 출력은 입력이 모두 0이거나 1이면 1이된다.</li>
</ul>

<p><img src="../../assets/img/csapp/13/img_1.png" width="60%" height="100%" /></p>

<ul>
  <li>아래의 그림은 멀티플렉서multiplexor로 알려진 간단하지만 유용한 조합회로의 에를 보여준다.
    <ul>
      <li>멀티플렉서는 제어 입력 신호 값에 따라 여러 데이터 신호 중에서 한 값을 선택한다.</li>
      <li>제어신호 s가 1이면 출력은 a가 되고, s가 0이면 입력 b가 출력이된다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/csapp/13/img_3.png" width="60%" height="100%" /></p>

<ul>
  <li>HCL 수식들은 조합논리회로와 C에서의 논리 수식 간에 분명한 연관관계를 보여준다.
    <ul>
      <li>이들은 모두 입력에 대한 함수를 계산하기 위해 불 연산을 사용한다. 계산을 표현하는 이들 간의 차이를 살펴보는 것은 의미가 있다.
        <ul>
          <li>조합회로가 일련의 논리 게이트로 이루어지기 때문에 출력들이 입력 변화에 연속적으로 반응하는 특성을 갖는다.
            <ul>
              <li>반대로 C 수식은 프로그램 실행 중에 이 식을 마난야 계산이 이루어진다.</li>
            </ul>
          </li>
          <li>C에서 논리 수식을 0을 거짓으로, 다른 값들을 참으로 해석한다.
            <ul>
              <li>반대로 논리 게이트는 비트 값 0과 1에 대해서만 연산을 한다.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="423-워드수준-조합회로와-hcl-정수-수식">4.2.3 워드수준 조합회로와 HCL 정수 수식</h2>
<ul>
  <li>논리 게이트들의 커다란 네트워크를 연결해서 보다 복잡한 함수를 계산하는 조합회로를 구성할 수 있다.</li>
  <li>데이터 워드를 가지고 동작하는 회로를 설계 하게 된다.</li>
  <li>HCL에서 워드 크기를 명시하지 않고 모든 워드수준 신호를 int로 선언한다.
    <ul>
      <li>이것은 단순성을 위한 것이다.</li>
    </ul>
  </li>
  <li>아래의 그림은 워드수준 동일성 시험 회로다.</li>
</ul>

<p><img src="../../assets/img/csapp/13/img_4.png" width="60%" height="100%" /></p>

<ul>
  <li>아래의 그림은 워드수준 멀티플렉서 회로다.</li>
</ul>

<p><img src="../../assets/img/csapp/13/img_5.png" width="60%" height="100%" /></p>

<ul>
  <li>멀티플렉서 함수는 HCL의 case 수식을 사용해서 기술된다.
    <ul>
      <li>case 수식은 다음과 같은 일반 형태를 갖는다.</li>
    </ul>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">    <span class="o">[</span>
        <span class="n">select1</span> <span class="o">:</span> <span class="n">expr1</span><span class="o">;</span>
        <span class="n">select2</span> <span class="o">:</span> <span class="n">expr2</span><span class="o">;</span>
          <span class="o">.</span>
          <span class="o">.</span>
          <span class="o">.</span>
        <span class="n">selectk</span> <span class="o">:</span> <span class="n">exprk</span><span class="o">;</span>
    <span class="o">]</span>  
    </code></pre></figure>
:ET