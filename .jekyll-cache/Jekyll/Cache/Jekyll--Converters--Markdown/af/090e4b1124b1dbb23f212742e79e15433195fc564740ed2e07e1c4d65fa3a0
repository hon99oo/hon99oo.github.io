I"X<h1 id="1-주소-공간의-개념">1. 주소 공간의 개념</h1>

<h2 id="11-초기-시스템">1.1 초기 시스템</h2>
<ul>
  <li>메모리 관점에서 초기 컴퓨터는 많은 개념을 사용자에게 제공하지 않았다. 하지만, 시분할 시스템이 대중화 되면서 운영체제에게 새로운 요구 사항이 부과되었다. 여러 프로그램이
메모리에 동시에 존재하려면 <strong>보호(protection)</strong>가 중요한 문제가 된다.</li>
  <li>한 프로세스가 다른 프로세스의 메모리를 읽거나 혹은 더 안좋게는 쓸 수 있는 상황이 있어선 안된다.</li>
</ul>

<h2 id="12-주소-공간">1.2 주소 공간</h2>
<ul>
  <li>위 문제의 위험에 대비하기 위해 운영체제는 <strong>사용하기 쉬운(easy to use)</strong>메모리 개념을 만들어야 한다.
    <ul>
      <li>이 개념이 <strong>주소 공간(address space)</strong>이다.</li>
    </ul>
  </li>
  <li>주소 공간은 실행 프로그램의 모든 메모리 상태를 갖고 있다.
    <ul>
      <li>프로그램의 코드(code, 명령어): 메모리에 존재해야 하고 따라서 주소 공간에 존재한다.</li>
      <li>스택: 함수 호출 체인 상의 현재 위치, 지역 변수, 함수 인자와 반환 값 등을 저장하는 데 사용된다.</li>
      <li>힙: 동적으로 할당되는 메모리를 위해 사용된다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/ostep/04/img.png" width="50%" height="100%" /></p>
<ul>
  <li>위의 그림은 주소 공간의 예이다.
    <ul>
      <li>위의 그림처럼 실제로 프로그램이 물리 주소 0에서 16KB 사이에 존재하는 것은 아니다.실제로는 임의의 물리 주소에 탑재된다. 운영체제게가 해당 일을 할 때
        <h2 id="13-목표">1.3 목표</h2>
      </li>
    </ul>
  </li>
</ul>
:ET