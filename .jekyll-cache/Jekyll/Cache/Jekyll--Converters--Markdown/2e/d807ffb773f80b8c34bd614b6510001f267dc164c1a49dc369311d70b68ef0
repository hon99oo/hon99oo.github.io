I"'(<h1 id="chapter-02-정보의-표현과-처리">Chapter 02. 정보의 표현과 처리</h1>
<ul>
  <li>컴퓨터는 두 개의 값을 갖는 신호로 표현되는 정보를 저장하고 처리한다.</li>
  <li>비트 패턴
    <ul>
      <li>이진수 체계를 사용하여 여러 비트를 묶어서 양수들을 인코딩하기 위해 사용한다.</li>
      <li>표준 문자코드를 사용해서 문서의 글자와 기호를 인코딩할 수 있다.</li>
    </ul>
  </li>
  <li>인코딩
    <ul>
      <li>비부호형 : 전통적인 이진수 표시 사용</li>
      <li>부호형(2의 보수) : 양수 또는 음수 값을 갖는 부호형 정수를 표시하는 가장 일반적인 방법</li>
      <li>부동소수점 : 2진수 버전의 소수 표시방법</li>
    </ul>
  </li>
  <li>이 장을 통해 표시 가능한 숫자의 범위, 비트수준 표시, 산술연산 성질 같은 특성을 도출한다.</li>
</ul>

<p><br /><br /></p>

<h2 id="21-정보의-저장">2.1 정보의 저장</h2>
<ul>
  <li>기계수준의 프로그램은 메모리를 ‘가상메모리’라고 하는 거대한 바이트의 배열로 취급</li>
  <li>메모리의 각 바이트는 주소라고 하는 고유한 숫자로 식별할 수 있음</li>
  <li>모든 가능한 주소들의 집합을 ‘가상 주소공간’이라고 부름</li>
</ul>

<h3 id="211-16진수-표시">2.1.1 16진수 표시</h3>
<ul>
  <li>1바이트는 8비트로 이루어짐</li>
  <li>
    <p>이진수 표시와 십진수 표시는 비트 패턴을 표시하는 데 매우 불편함 -&gt; 16진수 사용</p>

    <blockquote>
      <p>16진수 &lt;-&gt; 10진수 &lt;-&gt; 2진수 변환을 잘 할 수 있어야 이후 내용이 헷갈리지 않음</p>
    </blockquote>
  </li>
</ul>

<h3 id="212-데이터의-크기">2.1.2 데이터의 크기</h3>
<ul>
  <li>모든 컴퓨터는 워드 크기(word size)를 규격으로 가지게 됨
    <ul>
      <li>w비트 워드 크기를 갖는 컴퓨터에서 가상주소는 0에서 2^w - 1 범위를 가짐</li>
      <li>프로그램은 최대 2^w 바이트에 접근 가능</li>
    </ul>
  </li>
  <li>
    <p>최근에는 32비트 워드 크기를 갖는 컴퓨터에서 64비트 워드 크기를 갖는 컴퓨터로 전환이 보편적임</p>

    <p><img src="../../assets/img/csapp/02/01.png" width="50%" height="100%" /></p>
  </li>
</ul>

<h3 id="213-주소지정과-바이트-순서">2.1.3 주소지정과 바이트 순서</h3>
<ul>
  <li>여러 바이트에 걸쳐 있는 프로그램 객체들에 있어 두 개의 관습 설정
    <ul>
      <li>객체의 주소가 무엇이 되어야 하는지</li>
      <li>메모리에 바이트들을 어떻게 정렬해야 하는지</li>
    </ul>
  </li>
  <li>비트 표시 [xw−1, xw−2, . . . , x1, x0]를 갖는 w-비트 정수가 있다.
    <ul>
      <li>가장 중요한 바이트 : [xw−1, xw−2, . . . , xw−8]</li>
      <li>가장 덜 중요한 바이트 : [x7, x6, . . . , x0]</li>
    </ul>
  </li>
  <li>바이트 저장 방법
    <ul>
      <li>리틀 엔디안 : 가장 덜 중요한 바이트가 먼저 오는</li>
      <li>빅 엔디안 : 가장 중요한 바이트가 먼저 오는</li>
      <li>대부분의 인텔 호환 머신들은 리틀 엔디안 방식으로 동작</li>
    </ul>
  </li>
  <li>바이트 순서가 이슈가 되는 경우
    <ul>
      <li>이진 데이터가 네트워크를 통해 다른 컴퓨터로 전송될 때
        <ul>
          <li>리틀 엔디안과 빅 엔디안과의 통신에 있어 바이트 순서가 뒤바뀜</li>
        </ul>
      </li>
      <li>정수 데이터를 나타내는 바이트들을 살펴볼 때</li>
      <li>프로그램이 정상적인 타입 체계를 회피하도록 작성되었을 때</li>
    </ul>
  </li>
</ul>

<h3 id="214-스트링의-표시">2.1.4 스트링의 표시</h3>

<blockquote>
  <p>그냥 ASCII를 사용한다는 내용,,,</p>
</blockquote>

<h3 id="215-코드의-표현">2.1.5 코드의 표현</h3>
<ul>
  <li>
    <p>인스트럭션들의 인코딩이 컴퓨터 타입마다 모두 다름</p>

    <p><img src="../../assets/img/csapp/02/img02.png" width="70%" height="100%" /></p>
  </li>
  <li>
    <p>컴퓨터 시스템에서 근본 개념은 컴퓨터의 관점에서 볼 때 프로그램이라는 것은 단순히 바이트의 연속이라는 것</p>
  </li>
</ul>

<h3 id="216-부울-boolean-대수">2.1.6 부울 Boolean 대수</h3>
<ul>
  <li>NOT : <code class="language-plaintext highlighter-rouge">~</code></li>
  <li>AND : <code class="language-plaintext highlighter-rouge">&amp;</code></li>
  <li>OR : <code class="language-plaintext highlighter-rouge">|</code></li>
  <li>
    <p>EXCLUSIVE-OR : <code class="language-plaintext highlighter-rouge">^</code></p>

    <p><img src="../../assets/img/csapp/02/img.png" width="70%" height="100%" /></p>
  </li>
</ul>

<h3 id="217-c에서의-비트수준-연산">2.1.7 C에서의 비트수준 연산</h3>
<ul>
  <li>
    <p>C에서는 비트들 간의 부울 연산을 지원</p>

    <p><img src="../../assets/img/csapp/02/img_1.png" width="70%" height="100%" /></p>
  </li>
  <li>
    <p>비트수준 연산은 일반적으로 마스크 연산을 구현할 때 사용한다.</p>
    <blockquote>
      <p>마스크: 비트 연산에 사용되는 데이터</p>
    </blockquote>
  </li>
</ul>

<h3 id="219-c에서의-쉬프트-연산">2.1.9 C에서의 쉬프트 연산</h3>
<ul>
  <li>비트 패턴을 좌우로 이동시키는 쉬프트 연산 집합 제공</li>
  <li>x « k
    <ul>
      <li>x는 좌측으로 k비트 이동하고, 중요한 좌측의 k비트가 밀려서 삭제되며, 우측에는 k개의 0으로 채워진다.</li>
    </ul>
  </li>
  <li>x » k
    <ul>
      <li>좌측 쉬프트와 비슷하지만 미묘한 차이가 있다.</li>
      <li>논리 우측 쉬프트 : 좌측 끝을 k개의 0들로 채움</li>
      <li>산술 우측 쉬프트 : 좌측 끝을 가장 중요한 비트를 K개 반복해서 채움</li>
    </ul>
  </li>
  <li>부호형 데이터는 산술 우측 쉬프트, 비부호형 데이터는 논리 우측 쉬프트 사용</li>
</ul>

<p><br /><br /></p>

<h2 id="22-정수의-표시">2.2 정수의 표시</h2>
<ul>
  <li>
    <p>컴퓨터가 어떻게 정수를 인코딩하고 사용하는지, 아래 그림은 수학적 용어들로 나열한 것</p>

    <p><img src="../../assets/img/csapp/02/img_2.png" width="70%" height="100%" /></p>
  </li>
</ul>

<h3 id="221-정수형-데이터-타입">2.2.1 정수형 데이터 타입</h3>
<ul>
  <li>서로 다른 크기에 할당된 바이트 수는 컴퓨터의 워드 크기와 컴파일러에 따라 달라진다.</li>
  <li>64비트 프로그램에서의 C 정수형 자료형의 일반적인 범위
    <ul>
      <li>음수의 범위가 양의 범위보다 1 더 넓은 것에 주목</li>
    </ul>

    <p><img src="../../assets/img/csapp/02/img_3.png" width="70%" height="100%" /></p>
  </li>
</ul>

<h3 id="222-비부호형의-인코딩">2.2.2 비부호형의 인코딩</h3>
<ul>
  <li>음수 값을 포함하지 않음</li>
  <li>
    <p>B2U는 Binary 에서 Unsigned의 줄임말</p>

    <p><img src="../../assets/img/csapp/02/img_4.png" width="70%" height="100%" />
<img src="../../assets/img/csapp/02/img_5.png" width="70%" height="100%" /></p>
  </li>
</ul>

<h3 id="223-2의-보수-twos-complement-인코딩">2.2.3 2의 보수 two’s complement 인코딩</h3>
<ul>
  <li>음수 값을 포함</li>
  <li>
    <p>B2T는 Binary 에서 Two’s complement의 줄임말</p>

    <p><img src="../../assets/img/csapp/02/img_6.png" width="70%" height="100%" />
<img src="../../assets/img/csapp/02/img_7.png" width="70%" height="100%" /></p>
  </li>
</ul>

<blockquote>
  <p>모든 머신들에서의 호환성을 극대화하는 것을 고려하는 프로그래머라면 자료형들의 보장된 범위를 넘어가는 표현 가능한 값의 특정 범위를 가정해서는 안되며, 
부호형 수에 대해서 특정 표시를 가정해서도 안된다.</p>
</blockquote>

<h3 id="224-비부호형과-부호형-간의-변환">2.2.4 비부호형과 부호형 간의 변환</h3>
<ul>
  <li>C는 서로 다른 숫자 데이터 타입들 간에 캐스팅을 허용한다.</li>
  <li>2의 보수에서 비부호형으로의 변환
    <ul>
      <li>TMin ≤ x ≤ TMax를 만족하는 x에 대해<br /> x가 0보다 크거나 같으면 x<br />x가 0보다 작으면 x+2^w</li>
    </ul>

    <blockquote>
      <p>이유는 2의 보수는 가장 중요한 바트 위치에 부호를 표현하는 비트를 사용하는데 Unsigned에서는 부호비트를 사용하지 않기 때문이다.</p>
    </blockquote>
  </li>
  <li>비부호형에서 2의 보수로의 변환
    <ul>
      <li>0 ≤ u ≤ UMax를 만족하는 u에 대해<br />u가 TMax보다 작거나 같으면 u<br />u가 TMax보다 크면 u-2^w</li>
    </ul>

    <blockquote>
      <p>이유는 T2U의 이유와 동일하다.<br />
이러한 특성이 산술연산에서 오버플로우를 일으킨다. 2.3장에서 해당 내용이 나올 예정이다.(이해하는데 살짝 오래걸려씀 ㅜㅜ..)</p>
    </blockquote>
  </li>
</ul>

<h3 id="225-c에서-부호형과-비부호형의-비교">2.2.5 C에서 부호형과 비부호형의 비교</h3>
<ul>
  <li>C에서는 부호형과 비부호형 산술연산을 지원한다.
    <ul>
      <li>C는 묵시적으로 부호형 인자를 비부호형으로 변환하고, 숫자들이 비음수라고 가정하고 계산을 수행한다.
<img src="../../assets/img/csapp/02/img_8.png" width="70%" height="100%" /></li>
    </ul>
  </li>
</ul>

<h3 id="226-수의-비트-표시를-확장하기">2.2.6 수의 비트 표시를 확장하기</h3>
<ul>
  <li>비부호형 수를 길이가 긴 데이터 타입으로 변환하기 위해서 단순히 앞에 0들을 추가할 수 있다.
    <ul>
      <li>영의 확장 zero extension 이라고 알려짐</li>
    </ul>
  </li>
  <li>2의 보수를 보다 긴 데이터 타입으로 변환하려면 앞에 가장 중요한 비트를 복사해서 추가한다.
    <ul>
      <li>부호 확장 sign extension 이라고 알려짐</li>
    </ul>

    <p><img src="../../assets/img/csapp/02/img_9.png" width="70%" height="100%" /></p>
  </li>
</ul>
:ET