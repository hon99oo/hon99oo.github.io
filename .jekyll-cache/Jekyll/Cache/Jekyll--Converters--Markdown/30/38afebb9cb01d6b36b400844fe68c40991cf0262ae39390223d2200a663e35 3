I"D<h1 id="part1-자바-시작하기">Part1 자바 시작하기</h1>
<h2 id="java">Java</h2>
<ul>
  <li>객체지향언어</li>
  <li>C,C++ 문법을 기본으로 개발
    <ul>
      <li>C언어에 객체지향 특성 확장</li>
    </ul>
  </li>
  <li>플랫폼에 독립적임
    <ul>
      <li>JVM으로 인해서 어떤 플랫폼에서도 실행 가능함</li>
    </ul>
  </li>
  <li>Garbage Collector로 사용되지 않는 메모리 자동적으로 정리해줌</li>
  <li>JDK : Java Development Kit</li>
</ul>

<p><br /><br /></p>

<h2 id="java-개발순서">JAVA 개발순서</h2>
<ol>
  <li>코드 작성</li>
  <li>코드 컴파일</li>
  <li>컴파일한 소스를 JVM을 이용하여 실행</li>
</ol>

<p><br /><br /></p>

<h2 id="주석문">주석문</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">//</code> : 행단위 주석</li>
  <li><code class="language-plaintext highlighter-rouge">/* */</code> : 블럭단위 주석</li>
  <li><code class="language-plaintext highlighter-rouge">/** ..*.. */</code> : 문서화 주석</li>
</ul>

<p><br /><br /></p>
<h1 id="part2-변수와-계산">Part2 변수와 계산</h1>

<h2 id="변수">변수</h2>
<p>변수 값(Data)을 저장할 수 있는 메모리 공간</p>
<ul>
  <li>java는 강형 언어로써 모든 변수의 타입이 컴파일 시에 결정됨</li>
  <li>java 식별자 명명 규칙
    <ul>
      <li>첫 번째 글자는 문자 이거나 <code class="language-plaintext highlighter-rouge">$</code>,<code class="language-plaintext highlighter-rouge">_</code> 이어야 함</li>
      <li><code class="language-plaintext highlighter-rouge">$</code>,<code class="language-plaintext highlighter-rouge">_</code> 이외의 특수문자는 사용 불가능</li>
      <li>키워드는 식별자로 사용할 수 없음</li>
    </ul>
  </li>
  <li>java 변수 명명 관례
    <ul>
      <li>첫 번째 문자가 소문자인 명사로 정함</li>
      <li>여러 단어로 구서된 이름의 경우 두번째 단어부터 첫글자를 대문자로 함 (카멜 표기법)</li>
      <li><code class="language-plaintext highlighter-rouge">_</code>를 쓰지 않음</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>
<h2 id="상수">상수</h2>
<p>상수란 수식에서 변하지 않는 값을 의미</p>
<ul>
  <li>상수의 선언
    <ul>
      <li>final 상수타입 상수명;
        <ul>
          <li>eg) final int J;</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>상수 명명 관례
    <ul>
      <li>대문자로만 구성된 명사로 정함</li>
      <li>여러 단어로 구성된 이릠의 경우 단어 사이에 <code class="language-plaintext highlighter-rouge">_</code>을 써서 구분함</li>
    </ul>
  </li>
  <li>상수를 사용해야 하는 경우
    <ul>
      <li>값이 변하면 위험한 경우에 상수 사용</li>
      <li>값만 봤을 때 무엇을 의미하는지 쉽게 파악할 수 없는 값에도 값 자체를 사용하기 보다는 상수를 사용</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>
<h2 id="기본형-타입">기본형 타입</h2>
<p>기본형 타입은 가장 기본이 되는 데이터 타입으로써 정수형,실수형,문자형,불린형을 의미한다.</p>
<ul>
  <li>논리형
    <ul>
      <li>boolean 1byte 크기, true와 false 중 한 가지 값을 가질 수 있음</li>
    </ul>
  </li>
  <li>문자형
    <ul>
      <li>char 2byte 크기, 작은따옴표를 이용하여 한 글자 표현 가능</li>
    </ul>
  </li>
  <li>정수형
    <ul>
      <li>int 4byte, long 8byte</li>
    </ul>
  </li>
  <li>실수형
    <ul>
      <li>float 4byte, double 9byte</li>
    </ul>
  </li>
  <li>리터럴
    <ul>
      <li>CS 분야에서 리터럴이란, 소스 코드의 고정된 값을 대표하는 용어</li>
      <li>리터럴은 일종의 값이다. true, false, 10, 11.1, ‘a’등 이런 값 자체를 리터럴이라고 함</li>
    </ul>
  </li>
  <li>사용 방법
    <ul>
      <li>long : 값을 적을 때 뒤에 l이나 L 적어야함</li>
      <li>float : 값을 적을 때 뒤에 f나 F를 적어야함</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>
<h2 id="기본형-타입변환">기본형 타입변환</h2>
<ul>
  <li>묵시적 형변환
    <ul>
      <li>크기가 작은 타입을 크기가 더 큰 타입으로 바꿀 때에는 묵시적으로 형을 바꾸어 줌</li>
    </ul>
  </li>
  <li>명시적 형변환
    <ul>
      <li>크기가 더 큰 타입을 작은 타입으로 바꿀 때에는 명시적으로 변환 해주어야 함</li>
      <li>eg) long x = 20; int y = (int) x;</li>
    </ul>
  </li>
</ul>

<p><br /><br /></p>
<h2 id="연산자-우선순위">연산자 우선순위</h2>
<ul>
  <li>최우선연산자 ( ., [], () )</li>
  <li>단항연산자 ( ++,–,!,~,+/-   : 부정, bit변환&gt;부호&gt;증감)
    <ul>
      <li>단, 후위연산자(a++)은 우선순위가 낮음</li>
      <li>eg) a=5, x = a++ - 5 라면 x는 0, a는6</li>
    </ul>
  </li>
  <li>산술연산자 ( *,/,%,+,-,shift) &lt; 시프트연산자 ( »,«,»&gt; ) &gt;</li>
  <li>비교연산자 ( &gt;,&lt;,&gt;=,&lt;=,==,!= )</li>
  <li>비트연산자 ( &amp;,<code class="language-plaintext highlighter-rouge">|</code>,,~ )</li>
  <li>논리연산자 (&amp;&amp; , <code class="language-plaintext highlighter-rouge">||</code> , !)</li>
  <li>삼항연산자 (조건식) ? :</li>
  <li>대입연산자 =,*=,/=,%=,+=,-=</li>
</ul>
:ET