I"Q!<h1 id="boj">BOJ</h1>

<h2 id="그리디-2891-카약과-강풍">그리디 2891 카약과 강풍</h2>
<p><a href="https://www.acmicpc.net/problem/2891">문제로 이동!</a></p>

<h2 id="문제">문제</h2>

<p>2890번을 보면 알겠지만, 상근이는 카약 대회를 개최했다. 그런데, 갑자기 엄청난 강풍이 경기장에 불었고, 일부 카약이 부서졌다. 경기는 5분 안에 시작해야 하는 상황이다.</p>

<p>다행히 일부 팀은 혹시 모를 사태에 대비해서 카약을 하나 더 경기장에 들고 왔다. 카약은 매우 무겁고 운반하기 어렵다. 따라서, 자신의 바로 다음이나 전에 경기하는 팀에게만 카약을 빌려주려고 한다. 즉, 팀 4는 여분의 카약을 3이나 5에게만 빌려줄 수 있다. 다른 팀에게서 받은 카약은 또 다른 팀에게 빌려줄 수 없다. 또, 카약을 하나 더 가져온 팀의 카약이 손상되었다면, 여분의 카약으로 경기에 출전하게되고, 이 카약은 다른 팀에게 빌려줄 수 없다.</p>

<p>카약이 부서진 팀과 하나 더 가져온 팀이 주어진다. 카약을 적절히 빌렸을 때 출발하지 못하는 팀의 최솟값은 몇 팀인지 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 팀의 수 N, 카약이 손상된 팀의 수 S, 카약을 하나 더 가져온 팀의 수 R이 주어진다. (2 ≤ N ≤ 10, 1 ≤ S, R ≤ N)</p>

<p>둘째 줄에는 카약이 손상된 팀의 번호가 주어진다. 팀 번호는 중복되지 않는다.</p>

<p>셋째 줄에는 카약을 하나 더 가져온 팀의 번호가 주어진다. 팀 번호는 중복되지 않는다.</p>

<h2 id="예제-입력">예제 입력</h2>
<p>입력: [5, 2, 1] [2, 4] [3],  출력: 1<br />
입력: [5, 2, 3] [2, 4] [1, 3, 5], 출력: 0<br /></p>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>해당 문제는 카약이 손상된 팀과 여분의 카약을 가져온 팀의 관계를 잘 생각하면서 풀어야 한다. 여분을 가져온 팀이 손상이 되는 경우가 있는 부분을 잘 생각해야한다.
또한 여분을 나누어 줄 때 index 0 부터 차례대로 나누어줘야 모두에게 적절히 분배할 수 있다. 그렇기 때문에 여분을 가져온 팀의 정렬이 필요하다.(배열이 [5, 2, 4] 이런식으로 들어올 수 있기 때문)</p>
</blockquote>

<h3 id="solution">solution</h3>
<ol>
  <li>카약을 모두 가져왔다고 가정하고 n 길이의 배열을 1로 초기화한다.</li>
  <li>손상된 카약을 가지고 있는 팀을 반복문을 돌면서 -1 해준다.</li>
  <li>여분을 가져온 카약팀을 정렬해준다.</li>
  <li>여분을 가져온 카약팀을 반복문을 돌면서 양 옆에 카약이 없는 팀을 조회하고 있다면 카약이 없는 팀의 value를 +1, 여분을 가져온 카약팀을 -1 올려준다.
    <ul>
      <li>여분을 가져온 카약팀은 카약이 2 이상 있는 팀이기 때문에 조건문을 x&gt;=2 로 설정한다.</li>
    </ul>
  </li>
</ol>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python">    <span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">n_list</span><span class="p">,</span> <span class="n">brk_list</span><span class="p">,</span> <span class="n">add_list</span><span class="p">):</span>
        <span class="n">kayak</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">n_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">brk_list</span><span class="p">:</span>
            <span class="n">kayak</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="n">add_list</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">add_list</span><span class="p">:</span>
            <span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span>
            <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">index</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                    <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                    <span class="n">kayak</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    
        <span class="n">result</span> <span class="o">=</span> <span class="n">kayak</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>
    
    
    <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
        <span class="n">n_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
        <span class="n">brk_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
        <span class="n">add_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
    
        <span class="k">print</span><span class="p">(</span><span class="n">solution</span><span class="p">(</span><span class="n">n_list</span><span class="p">,</span> <span class="n">brk_list</span><span class="p">,</span> <span class="n">add_list</span><span class="p">))</span></code></pre></figure>
:ET