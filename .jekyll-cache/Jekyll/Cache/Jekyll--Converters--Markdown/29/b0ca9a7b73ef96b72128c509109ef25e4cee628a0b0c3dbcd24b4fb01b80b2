I"6<h1 id="chapter-03-프로그램의-기계수준-표현">Chapter 03. 프로그램의 기계수준 표현</h1>
<ul>
  <li>3.1 역사적 관점</li>
  <li>3.2 프로그램의 인코딩</li>
  <li>3.3 데이터의 형식</li>
  <li>3.4 정보 접근하기</li>
  <li>3.5 산술연산과 논리연산</li>
  <li>3.6 제어문</li>
  <li>3.7 프로시져</li>
  <li>3.8 배열의 할당과 접근</li>
  <li>3.9 이기종 자료구조</li>
  <li>3.10 기계수준 프로그램에서 제어와 데이터의 결합</li>
  <li>3.11 부동소수점 코드</li>
  <li>3.12 요약</li>
</ul>

<h1 id="311-부동소수점-코드">3.11 부동소수점 코드</h1>

<ul>
  <li>프로세서의 부동소수점 아키텍처는 부동소수점 데이터로 연산하는 방법이 기계에 매피되는 방법에 영향을 주는 다음과 같은 여러 가지 개념들로 구성된다.
    <ul>
      <li>부동소수점 값들이 저장되고 접근되는 방법
        <ul>
          <li>이것은 대개 레지스터들의 일부 형태로 이뤄진다.</li>
        </ul>
      </li>
      <li>부동소수점 데이터로 연산하는 인스트럭션</li>
      <li>함수들의 인자와 리턴 값으로 부동소수점 값들을 전달하기 위해 이용되는 관례들</li>
      <li>함수를 호출하는 동안에 레지스터들을 보존하는 관례들</li>
    </ul>
  </li>
  <li>x86-64 부동소수점 아키텍처를 이해하기 위해선 간략한 역사적 고찰을 해보는 것이 유용하다.
    <ul>
      <li>1997년에 펜티엄/MMX를 발표한 이래, 인텔과 AMD는 그래픽과 영상처리를 지원하기 위해 일련의 미디어 인스트럭션 세대들을 포함해왔다.</li>
      <li>이들에 대한 확장현태가 진행되었고 MMX로부터 SSE, AVX로 개선되어갔다.</li>
      <li>AVX 부동소수점 아키텍처는 %ymm0-%ymm15로 이름 붙인 16개의 YMM 레지스터들에 저장된다.</li>
      <li>스칼라 데이터로 연산할 때, 이 레지스터들은 부동소수점 데이터만을 보관하며, 하위 32비트(float), 64비트(double)만이 사용된다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/csapp/11/img.png" width="80%" height="100%" /></p>

<h2 id="3111-부동소수점-이동-및-변환-연산">3.11.1 부동소수점 이동 및 변환 연산</h2>

<ul>
  <li>XMM 레지스터에서 다른 레지스터로 이동하는 것뿐만 아니라 메모리와 XMM 레지스터들 간의 부동소수점 데이터를 이동하는 인스트럭션들을 보여준다.</li>
  <li>메모리를 참조하는 인스트럭션들은 스칼라 인스트럭션들이다.
    <ul>
      <li>이것은 이들이 묶인 데이터 값들이 아닌 개별 값들에 대해 연산한다는 것을 의미한다.</li>
    </ul>
  </li>
  <li>GCC는 데이터를 메모리에서 XMM 레지스터로,또는 XMM 레지스터에서 메모리로 이동하기 위해서만 스칼라 이동연산을 이용한다.</li>
  <li>두 개의 XMM 레지스터들 간의 데이터 이동을 위해서는 한 개의 XMM 레지스터의 내용 전체를 다른 레지스터로 복사하기 위해 두 개의 인스트럭션 중 하나를 이용한다.</li>
</ul>

<h2 id="3112-프로시저에서-부동소수점-코드">3.11.2 프로시저에서 부동소수점 코드</h2>

<h2 id="3113-부동소수점-산술연산">3.11.3 부동소수점 산술연산</h2>

<h2 id="3114-부동소수점-상수의-정의-및-이용">3.11.4 부동소수점 상수의 정의 및 이용</h2>

<h2 id="3115-부동소수점-코드에서-비트연산-사용하기">3.11.5 부동소수점 코드에서 비트연산 사용하기</h2>

<h2 id="3116-부동소수점-비교-연산">3.11.6 부동소수점 비교 연산</h2>

<h2 id="3117-부동소수점-코드에-대한-관찰">3.11.7 부동소수점 코드에 대한 관찰</h2>

<h1 id="312-요약">3.12 요약</h1>
:ET