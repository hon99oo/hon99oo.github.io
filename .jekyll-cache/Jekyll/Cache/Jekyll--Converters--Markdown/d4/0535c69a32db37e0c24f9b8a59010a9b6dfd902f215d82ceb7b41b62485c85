I"x<h1 id="11-프로세스의-개념">1.1 프로세스의 개념</h1>
<ul>
  <li>운영체제는 <strong>실행 중인 프로그램</strong>의 개념을 제공하는데, 이를 <strong>프로세스(process)</strong>라고 한다.</li>
  <li>프로세스의 구성 요소를 이해하기 위해서 <strong>하드웨어 상태</strong>를 이해해야 한다.
    <ul>
      <li>메모리: 프로그램의 명령어와 데이터는 메모리에 저장된다.</li>
      <li>레지스터: 프로그램의 많은 명령어들이 레지스터를 직접 읽거나 갱신한다.</li>
    </ul>
  </li>
</ul>

<h1 id="12-프로세스-api">1.2 프로세스 API</h1>
<ul>
  <li>운영체제가 제공하는 API 중 중요한 다섯가지
    <ul>
      <li>생성(Create): 운영체제는 새로운 프로세스를 생성할 수 있는 방법을 제공해야 한다.</li>
      <li>제거(Destroy): 운영체제는 프로세스를 강제로 제거할 수 있는 인터페이스를 제공해야 한다.</li>
      <li>대기(Wait): 프로세스의 실행 중지를 기다릴 필요가 있다.</li>
      <li>각종 제어(Miscellaneous Control): 일시정지나 재개등</li>
      <li>상태(Status): 프로세스 상태 정보를 얻어내는 인터페이스를 제공한다.</li>
    </ul>
  </li>
</ul>

<h1 id="13-프로세스-생성-좀-더-자세하게">1.3 프로세스 생성: 좀 더 자세하게</h1>
<ul>
  <li>프로그램 실행을 위하여 운영체제가 하는 첫 번째 작업은 프로그램 코드와 정적 데이터(static data)를 메모리, 프로세스의 주소공간에 <strong>탑재(load)</strong>하는 것이다.</li>
  <li></li>
</ul>

<figure class="highlight"><pre><code class="language-c" data-lang="c">    <span class="cp">#include &lt;stdio.h&gt;
</span>    <span class="cp">#include &lt;unistd.h&gt;
</span>    <span class="cp">#include &lt;stdlib.h&gt;
</span>    <span class="cp">#include &lt;string.h&gt;
</span>    <span class="cp">#include &lt;sys/wait.h&gt;
</span>
    <span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"hello world (pid:%d)'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">getpid</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"fork failen"</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"hello, I am child (pid:%d)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">getpid</span><span class="p">());</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">myargs</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
            <span class="n">myargs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strdup</span><span class="p">(</span><span class="s">"wc"</span><span class="p">);</span>
            <span class="n">myargs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">strdup</span><span class="p">(</span><span class="s">"main.c"</span><span class="p">);</span>
            <span class="n">myargs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
            <span class="n">execvp</span><span class="p">(</span><span class="n">myargs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">myargs</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"this shouldn't print out"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">rc_wait</span> <span class="o">=</span> <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"hello, I am parent of %d (rc_wait:%d) (pid:%d)</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">rc_wait</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">getpid</span><span class="p">());</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span></code></pre></figure>

<p><img src="../../assets/img/ostep/02/img.png" width="80%" height="100%" /></p>
:ET