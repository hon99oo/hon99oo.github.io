I"'<h1 id="csapp">CS:APP</h1>
<p>Computer Systems A Programmer’s Perspective, CSAPP로도 잘 알려져있는 컴퓨터 구조론의 바이블이다. 이 책을 통해서 컴퓨터구조론을 다시 공부해볼 생각이다.
군대 전역 직후 2학년 2학기로 복학해서 컴퓨터 구조론 전공 수업을 들었지만 학점을 위한 공부만 해서 남아있는게 없는 것 같다. 인턴 생활을 하면서 다양한 부분에서 어려움을 겪었는데
기초를 몰라서 헤메고 있다는 느낌을 굉장히 많이 받았다.</p>

<p>첫 페이지를 읽었을 때 이 책으로 정하길 정말 잘했다는 생각이 들었다. 전공 수업때 사용했던 컴퓨터구조론 책은 제작자의 관점에서 기술 되었다는 느낌을 강하게 받았었다.
하지만, CSAPP는 프로그래머의 관점에서 기술하였고, 컴퓨터구조론의 시스템들을 어떻게 사용해서 좋은 프로그램을 개발할 수 있는지를 배울 수 있다고 한다. 
인턴 생활을 하면서 실제 현업을 겪고 느꼇던 강한 의문들을 해결할 수 있을 것 같은 느낌이다.</p>

<p>책의 목차는 정보의 표현과 처리로 시작하여 프로그램의 기계어 표현, 프로세서 구조, 프로그램 성능 최적화, 메모리 계층구조, 링커, 예외적인 제어흐름, 가상메모리, 시스템 수준 입출력, 네트워크 프로그래밍, 동시성 프로그래밍 
순서로 이어져 있다. 많은 사람들은 6장 메모리 계층구조, 7장 링커의 전까지 읽어도 좋다고 하지만, 가능하다면 12장 동시성 프로그래밍까지 읽어볼 생각이다.</p>

<h1 id="chapter-01-컴퓨터-시스템으로의-여행">Chapter 01. 컴퓨터 시스템으로의 여행</h1>
<ul>
  <li>시스템 구현방식은 변하지만 근본적인 개념들은 변하지 않는다.</li>
  <li>프로그래머들로 하여금 컴포넌트들이 어떻게 동작하고 프로그램 성능과 정확성에 어떤 영향을 주는지 알 수 있다.</li>
</ul>

<h3 id="11-정보는-비트와-컨텍스트로-이루어진다">1.1 정보는 비트와 컨텍스트로 이루어진다.</h3>
<ul>
  <li>텍스트 문자 -&gt; 아스키(ASCII) 표준 사용하여 표현 -&gt; 각 문자를 바이트 길이의 정수 값으로 표현 -&gt; 연속된 바이트 파일 저장</li>
</ul>

<h3 id="12-프로그램은-다른-프로그램에-의해-다른-형태로-번역된다">1.2 프로그램은 다른 프로그램에 의해 다른 형태로 번역된다.</h3>
<ul>
  <li>hello.c 실행 -&gt; 저급 기계어 인스트럭션들로 번역 -&gt; (실행가능 목적 프로그램)으로 합쳐져 바이너리 디스크 파일로 저장 
-&gt; 컴파일러 드라이브는 유닉스 시스템에서 소스파일에서 오브젝트 파일로 변경 -&gt; 4개의 단계를 거쳐서 실행
    <ul>
      <li>4개의 단계:
        <ol>
          <li>전처리기</li>
          <li>컴파일러</li>
          <li>어셈블러</li>
          <li>링커</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<h3 id="13-컴파일-시스템이-어떻게-동작하는지-이해하는-것은-중요하다">1.3 컴파일 시스템이 어떻게 동작하는지 이해하는 것은 중요하다.</h3>
<ul>
  <li>프로그램 성능 최적화하기
    <ul>
      <li></li>
    </ul>
  </li>
</ul>

:ET