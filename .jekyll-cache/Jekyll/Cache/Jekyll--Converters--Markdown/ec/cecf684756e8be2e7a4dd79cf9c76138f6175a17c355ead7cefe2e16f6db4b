I"6<h1 id="1-물리-메모리-크기의-극복-메커니즘">1. 물리 메모리 크기의 극복: 메커니즘</h1>
<ul>
  <li>큰 주소 공간을 지원하기 위해서 운영체제는 주소 공간 중에 현재는 크게 필요하지 않은 일부를 보관해 둘 공간이 필요하다.
    <ul>
      <li>현대 시스템에서는 보통 <strong>하드 디스크 드라이브</strong>가 이 역할을 담당한다.</li>
    </ul>
  </li>
  <li>왜 프로세스에게 굳이 “큰” 주소 공간을 제공해야하는가이다.
    <ul>
      <li>이에 대한 답은 다시 한번 편리함과 사용 용이성이다.</li>
      <li>주소 공간이 충분히 크면, 프로그램의 자료 구조들을 위한 충분한 메모리 공간이 있는지 걱정핮 ㅣ않아도 된다.</li>
      <li>필요 시 메모리 할당을 운영체제에게 요청하기만 하면 된다.</li>
    </ul>
  </li>
  <li>스왑 공간이 추가되면 운영체제는 실행되는 각 프로세스들에게 큰 가상 메모리가 있는 것 같은 환상을 줄 수 있다.</li>
  <li>멀티프로그래밍 시스템이 발명되면서 많은 프로세스들의 페이지를 물리 메모리에 전부 저장하는 것이 불가능하게 되었다.
    <ul>
      <li>그래서 일부 페이지들을 스왑 아웃하는 기능이 필요하게 되었다.</li>
    </ul>
  </li>
</ul>

<h2 id="11-스왑-공간">1.1 스왑 공간</h2>
<ul>
  <li>디스크에 페이지들을 저장할 수 있는 일정 공간을 확보하는 것이다.
    <ul>
      <li>이 용도의 공간을 <strong>스왑 공간(swap space)</strong>라고 한다.</li>
    </ul>
  </li>
  <li>운영체제는 스왑 공간에 있는 모든 페이지들의 <strong>디스크 주소</strong>를 기억해야 한다.</li>
  <li>스왑 공간의 크기는 매우 중요하다.
    <ul>
      <li>시스템이 사용할 수 있는 메모리 페이지의 최대수를 결정하기 때문이다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/ostep/08/img.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 긞은 물리 메모리와 스왑 공간이다.
    <ul>
      <li>Proc3은 사용되고 있지 않다.</li>
    </ul>
  </li>
</ul>

<h2 id="12-present-bit">1.2 Present Bit</h2>
<ul>
  <li>메모리가 참조되는 과정
    <ol>
      <li>프로세스가 가상 메모리 참조를 생성한다(명령어 탑재나 데이터 접근등).</li>
      <li>하드웨어는 메모리에서 원하는 데이터를 가져오기 전에, 우선 가상 주소를 물리 주소로 변환한다.</li>
      <li>TLB Hit 하면 TLB에서 물리 주소를 얻은 후에 메모리로 가져온다.</li>
      <li>TLB Miss 하면 하드웨어는 페이지 테이블의 메모리 주소를 파악하고(<strong>페이지 테이블 베이스 레지스터</strong>를 사용), VPN을 인덱스로 하여 원하는 <strong>페이지 테이블 항목(PTE)</strong>을 추출한다.</li>
      <li>해당 페이지 테이블 항목이 유효하고 관련 페이지가 물리 메모리에 존재한다면 하드웨어는 PTE에서 PFN 정보를 추출하고 그 정보를 TLB에 탑재한다.</li>
      <li>TLB 탑재 후 명령어를 재실행한다.</li>
    </ol>
  </li>
  <li>페이지가 디스크로 스왑되는 것을 가능케 하려면, 많은 기법이 추가되어야 한다.
    <ul>
      <li>하드웨어가 PTE에서 해당 페이지가 물리 메모리에 존재하지 않는다는 것을 표현 해야 한다.</li>
      <li><strong>present bit</strong>을 사용하여 각 페이지 테이블 항목에 어떤 페이지가 존재하는지를 표현한다.</li>
      <li>present bit이 1로 설정 되어 있다면, 물리 메모리에 해당 페이지가 존재한다.</li>
      <li>present bit이 0으로 설저오디어 있다면, 물리 메모리에 존재하지 않고 디스크에 존재한다는 것을 나타낸다.</li>
    </ul>
  </li>
  <li>물리 메모리에 존재하지 않는 페이지를 접근하는 행위를 일반적으로 <strong>페이지 폴트(page fault)</strong>라 한다.
    <ul>
      <li>페이지 폴트가 발생하면, 페이지 폴트를 처리하기 위해 운영체제로 제어권이 넘어가 <strong>페이지 폴트 핸들러(page-fault handler)</strong>가 실행된다.</li>
    </ul>
  </li>
</ul>

<h2 id="13-페이지-폴트">1.3 페이지 폴트</h2>
<ul>
  <li>페이지 폴트가 발생하면 운영체제가 그 처리를 담당한다.
    <ul>
      <li>운영체제의 <strong>페이지 폴트 핸들러</strong>가 그 처리 메커니즘을 규정한다.</li>
    </ul>
  </li>
  <li>만약 요청된 페이지가 메모리에 없고, 디스크로 스왑되었다면, 운영체제는 해당 페이지를 메모리로 스왑해 온다.
    <ul>
      <li>많은 시스템들에서 해당 정보를 페이지 테이블에 저장한다.</li>
      <li>페이지 폴트 발생 시, 운영체제는 페이지 테이블 항목에서 해당 페이지의 디스크 상 위치를 파악하여, 메모리로 탑재한다.</li>
    </ul>
  </li>
</ul>

<h2 id="14-메모리에-빈-공간이-없으면">1.4 메모리에 빈 공간이 없으면?</h2>
<ul>
  <li>메모리에 여유 공간이 없다면 탑재하고자 하는 새로운 페이지들을 위한 공간을 확보하기 위해 하나 또는 그 이상의 페이지들을 먼저 <strong>페이지 아웃(page out)</strong>하려고 할 수도 있다.</li>
  <li><strong>교체(replace)</strong> 페이지를 선택하는 것을 <strong>페이지 교체 정책(page-replacement policy)</strong>이라고 한다.</li>
</ul>

<h2 id="15-페이지-폴트의-처리">1.5 페이지 폴트의 처리</h2>

<p><img src="../../assets/img/ostep/08/img_1.png" width="90%" height="100%" /></p>

<ul>
  <li>위의 코드를 보면 TLB 미스 발생시, 세 가지의 중요한 경우가 있다는 것을 알 수 있다.
    <ol>
      <li>페이지가 <strong>존재</strong>하며 <strong>유효</strong>한 경우다.
        <ul>
          <li>TLB 미스 핸들러가 PTE에서 PFN을 가져와서 명령어를 재시도 한다.</li>
        </ul>
      </li>
      <li>페이지가 유효하지만 존재하지 않는 경우다.
        <ul>
          <li>페이지 폴트 핸들러가 반드시 실행되어야 한다.(물리 메모리에 존재하지 않고 디스크 상에 존재하는 경우다.)</li>
        </ul>
      </li>
      <li>페이지가 유효하지 않는 경우다.
        <ul>
          <li>하드웨어는 이 무효한 접근이 운영체제의 트랩 핸들러에 의해서 처리되도록 한다.</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h2 id="16-교체는-실제-언제-일어나는가">1.6 교체는 실제 언제 일어나는가</h2>
<ul>
  <li>메모리에 항상 어느 정도의 여유 공간을 비워두기 위해서, 대부분의 운영체제들은 여유 공간에 관련된 <strong>최댓값(high watermark, HW)</strong>과 <strong>최솟값(low watermark, LW)</strong>을 설정하여 교체 알고리즘 작동에 활용한다.</li>
  <li>동작 방법은 다음과 같다.
    <ul>
      <li>운영체제가 공간의 크기가 최솟값보다 작아지면 여유 공간 확보를 담당하는 백그라운드 쓰레드가 실행된다.</li>
      <li>이 쓰레드는 여유 공간의 크기가 최댓값에 이를 때까지 페이지를 제거한다.</li>
      <li>이 백그라운드 쓰레드는 일반적으로 <strong>스왑 데몬(swap daemon)</strong> 또는 <strong>페이지 데몬(page daemon)</strong>이라고 불린다.</li>
    </ul>
  </li>
  <li>일시에 여러 개를 교체하면 성능 개선이 가능하다.
    <ul>
      <li>많은 시스템들은 다수의 페이지들을 <strong>클러스터(cluster)</strong>나 <strong>그룹(group)</strong>으로 묶어서 한번에 스왑 파티션에 저장함으로써 디스크의 효율을 높인다.</li>
    </ul>
  </li>
</ul>

<h2 id="17-요약">1.7 요약</h2>
<ul>
  <li>시스템에 실제 존재하는 물리 메모리의 크기보다 더 많은 메모리를 사용하기 위한 개념을 소개하였다.</li>
  <li>메모리에 특정 페이지가 존재하는지를 알리기 위한 <strong>present bit</strong>와 좀 더 복잡한 페이지 테이블 구조가 필요하다.</li>
  <li>운영체제는 <strong>페이지 폴트(page fault)</strong>를 처리하기 위해서 <strong>페이지 폴트 핸들러(page-fault handler)</strong>를 실행시킨다.
    <ul>
      <li>핸들러는 원하는 페이지를 디스크에서 메모리로 전송하기 ㅜ이해 메모리의 일부 페이지들을 먼저 교체하여 새롭게 스왑되서 들어올 페이지를 위한 공간을 만드는 조치를 취한다.</li>
    </ul>
  </li>
</ul>

<h1 id="2-물리-메모리-크기의-극복-정책">2. 물리 메모리 크기의 극복: 정책</h1>
<ul>
  <li>빈 메모리 공간이 거의 없으면 일이 더 복잡해진다.</li>
  <li>그런 경우 운영체제는 <strong>메모리 압박(memory pressure)</strong>을 해소하기 위해 다른 페이지들을 강제적으로 페이징 아웃(paging out)하여 활발히 사용 중인 페이지들을 위한 공간을 확보한다.</li>
  <li><strong>내보낼(evict)</strong> 페이지(또는 페이지들) 선택은 운영체제의 <strong>교체 정책(replacement policy)</strong>안에 집약되어 있다.</li>
</ul>

<h2 id="21-캐시-관리">2.1 캐시 관리</h2>
<ul>
  <li>시스템의 전체 페이지들 중 일부분만이 메인 메모리에 유지된다는 것을 가정하면, 메인 메모리는 시스템의 가상 메모리 페이지를 가져다 놓기 위한 <strong>캐시</strong>로 생각될 수 있다.</li>
  <li>이 캐시를 위한 교체 정책의 목표는 <strong>캐시 미스</strong>의 횟수를 최소화하는 것이다.</li>
</ul>

<h3 id="평균-메모리-접근-시간average-memory-access-time-amat">평균 메모리 접근 시간(average memory access time, AMAT)</h3>
<ul>
  <li>앞으로 나올 페이지 교체 정책을 평균 메모리 접근 시간을 통해서 비교할 것이다.</li>
  <li>캐시 히트와 미스의 횟수를 안다면 프로그램의 평균 메모리 접근 시간을 계산할 수 있다.</li>
  <li>AMAT 는 다음과 같은 식으로 계싼할 수가 있다.
    <ul>
      <li>AMAT = Tm + (Pmiss * Td)</li>
      <li>Tm: 메모리 접근 비용</li>
      <li>Td: 디스크 접근 비용</li>
      <li>Pmiss: 캐시미스 확률(0.0~1.0)</li>
    </ul>
  </li>
</ul>

<h2 id="22-최적-교체-정책">2.2 최적 교체 정책</h2>
<ul>
  <li>교체 정책의 동작 방식을 잘 이해하기 위해서 <strong>최적</strong> 교체 정책(The Optimal Replacement Policy)과 비교하는 것이 좋다.
    <ul>
      <li>최적 교체 정책은 미스를 최소화한다.</li>
      <li>가장 나중에 접근될 페이지를 교체하는 것이 최적이며, 가장 적은 횟수의 미스를 발생시킨다는 것이 증명되었다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/ostep/08/img_2.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 그림은 최적의 교체 정책의 흐름이다.
    <ul>
      <li>캐시는 처음에 비어 있는 상태로 시작하기 때문에 첫 세 번의 접근은 미스이다.</li>
      <li>이러한 종류의 미스는 <strong>최초 시작 미스(cold-start miss)</strong> 또는 <strong>강제 미스(compulsory miss)</strong>라고 한다.</li>
    </ul>
  </li>
</ul>

<h2 id="23-간단한-정책-fifo">2.3 간단한 정책: FIFO</h2>
<ul>
  <li>FIFO(먼저 들어온 것이 먼저 나간다, 선입선출) 교체 방식을 사용하였다.</li>
  <li>FIFO는 매우 구현하기 쉽다는 장점을 가진다.</li>
  <li>최적의 경우와 비교하면 FIFO는 눈에 띄게 성능이 안좋다.</li>
  <li>FIFO는 블럭들의 중요도를 판단할 수가 없다.</li>
</ul>

<p><img src="../../assets/img/ostep/08/img_3.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 그림은 FIFO 정책의 흐름</li>
</ul>

<h2 id="24-또-다른-간단한-정책-무작위-선택">2.4 또 다른 간단한 정책: 무작위 선택</h2>
<ul>
  <li>또 다른 유사한 교체 정책은 무작위 방식이다.</li>
  <li>메모리 압박이 있을 때 페이지를 무작위로 선택하여 교체한다.</li>
  <li>때로는 매우 좋은 성능을 보이며 때로는 최악의 성능을 보여준다.</li>
</ul>

<p><img src="../../assets/img/ostep/08/img_3.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 그림은 무작위 선택 정책의 흐름</li>
</ul>

<h2 id="25-과거-정보의-사용-lru">2.5 과거 정보의 사용: LRU</h2>
<ul>
  <li>불행하게도 FIFO 또는 무작위 선택 방식처럼 단순한 정책들은 중요한 페이지들을 혹은 바로 다시 참조하게 될 것들을 내보낼 수 있다는 비슷한 문제를 겪는다.</li>
  <li>스케줄링 정책에서와 같이 미래에 대한 예측을 위해서 과거 사용 이력을 활용한 기법이다.
    <ul>
      <li>페이지 교체 정책이 활용할 수 있는 과거 정보 중 하나는 <strong>빈도수(frequency)</strong>이다.</li>
      <li>좀 더 자주 사용되는 페이지의 특징은 접근의 <strong>최근성(recency)</strong>이다.</li>
    </ul>
  </li>
  <li>이러한 류의 정책은 <strong>지역성의 원칙(principle of locality)</strong>라고 부르는 특성에 기반을 둔다.</li>
  <li>그리하여 과거 이력에 기반한 교체 알고리즘 부류가 탄생하게 되었다.
    <ul>
      <li><strong>Least-Frequently-Used(LFU)</strong> 정책은 가장 적은 빈도로 사용된 페이지를 교체한다.</li>
      <li><strong>Least-Recently-Used(LRU)</strong> 정책은 가장 오래 전에 사용된 페이지를 교체한다.</li>
    </ul>
  </li>
</ul>

:ET