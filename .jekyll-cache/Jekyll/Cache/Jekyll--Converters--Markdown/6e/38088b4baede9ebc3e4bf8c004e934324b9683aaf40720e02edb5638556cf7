I"<h1 id="1-컨디션-변수">1. 컨디션 변수</h1>
<ul>
  <li>“락” 이외에도 병행 프로그램을 제작할 수 있는 다른 기법들이 존재한다.</li>
  <li>쓰레드가 실행을 계속하기 전에, 특정 <strong>조건</strong>의 만족여부를 검사해야 하는 경우가 많이 있다.</li>
</ul>

<figure class="highlight"><pre><code class="language-c" data-lang="c">    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  
    <span class="kt">void</span> <span class="o">*</span><span class="nf">child</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"child</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">done</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"parent: begin</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">pthread_t</span> <span class="n">c</span><span class="p">;</span>
        <span class="n">pthread_Create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">child</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">while</span><span class="p">(</span><span class="n">done</span><span class="o">==</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// spin-wait</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"parent: end</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span></code></pre></figure>

<ul>
  <li>위의 코드는 공유 변수를 사용한다.
    <ul>
      <li>while 문을 돌며 공유 변수가 변경될 때까지 기다린다.</li>
      <li>이 방법은 제대로 동작하지만 부모 쓰레드가 회전을 하면서 CPU 시간을 낭비하기 때문에 비효율적이다.</li>
    </ul>
  </li>
</ul>

<h2 id="11-컨디션-변수의-개념과-관련-루틴">1.1 컨디션 변수의 개념과 관련 루틴</h2>
<ul>
  <li>쓰레드 실행시, 특정 조건이 만족될 때까지의 대기를 위해 <strong>컨디션 변수(conditional variable)</strong>라고 불리는 개념을 사용할 수 있다.</li>
  <li>컨디션 변수는 일종의 큐 자료 구조다.</li>
  <li>컨디션 변수는 쓰레드 실행에서 어떤 상태(또는 어떤 <strong>조건</strong>)가 원하는 것과 다를 때 조건이 만족되기를 <strong>대기</strong>하는 큐이다.</li>
</ul>

<figure class="highlight"><pre><code class="language-c" data-lang="c">    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  
    <span class="kt">void</span> <span class="o">*</span><span class="nf">child</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"child</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">done</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"parent: begin</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">pthread_t</span> <span class="n">c</span><span class="p">;</span>
        <span class="n">pthread_Create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">child</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">while</span><span class="p">(</span><span class="n">done</span><span class="o">==</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// spin-wait</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"parent: end</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span></code></pre></figure>
:ET