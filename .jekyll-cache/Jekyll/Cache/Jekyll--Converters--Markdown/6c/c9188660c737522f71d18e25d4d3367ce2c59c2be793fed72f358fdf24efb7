I"<h1 id="chapter-07-링커">Chapter 07. 링커</h1>
<ul>
  <li>링킹은 여러 개의 코드와 데이터를 모아서 연결하여 메모리에 로드될 수 있고 실행될 수 있는 한 개의 파이로 만드는 작업이다.
    <ul>
      <li>링킹은 컴파일 시에 수행할 수 있다.</li>
      <li>로더에 의해 로드 타임에, 응용프로그램에 의해 실행 시에도 수행될 수 있다.</li>
    </ul>
  </li>
  <li>링커는 소프트웨어 개발 시에 중요한 역할: 독립적인 컴파일을 가능하게 하기 때문이다.</li>
  <li>링커를 배우는 이유
    <ul>
      <li>큰 프로그램을 작성하는 데 도움이 된다.</li>
      <li>위험한 프로그래밍 에러를 피할 수 있다.</li>
      <li>어떻게 언어의 변수 영역 규칙이 구현되었는지 이해하는 데 도움이 된다.</li>
      <li>다른 중요한 시스템 개념을 이해할 수 있게 된다.</li>
      <li>공유 라이브러리에 대해 이해할 수 있다.</li>
    </ul>
  </li>
</ul>

<h1 id="71-컴파일러-드라이버">7.1 컴파일러 드라이버</h1>
<ul>
  <li>대부분의 컴파일 시스템은 사용자를 대신해서 언어 전처리기, 컴파일러, 어셈블러, 링커를 필요에 따라 호출하는 컴파일러 드라이버를 제공한다.</li>
  <li>컴파일 순서
    <ol>
      <li>C 전처리기(cpp)로 main.c -&gt; ASCII 중간 파일인 main.i로 번역</li>
      <li>C 컴파일러(cc1)로 main.i -&gt; ASCII 어셈블리 언어 파일인 main.s로 번역</li>
      <li>어셈블러(as)로 main.s -&gt; 재배치 가능한 바이너리 목적파일인 main.o로 번역</li>
      <li>링커(ld)로 main.o &amp; sum.o 두개를 연결 -&gt; 실행 가능 목적파일 prog 생성</li>
      <li>로더라고 부르는 운영체제 내의 함수를 호출 -&gt; 로더는 실행파일 prog의 코드와 데이터를 메모리로 복사하고, 제어를 프로그램의 시작 부분으로 전환한다.</li>
    </ol>
  </li>
</ul>

<h1 id="72-정적연결">7.2 정적연결</h1>
:ET