I"T<h1 id="chapter-05-프로그램-성능-최적화하기">Chapter 05. 프로그램 성능 최적화하기</h1>
<ul>
  <li>프로그램을 작성하는 주목적은 모든 가능한 조건에서 프로그램이 정확하게 동작하도록 하는 것이다.</li>
  <li>프로그래머는 명확하고 간결한 코드를 작성해야하고, 이해하기 쉽고, 코드를 검토할 때와 수정할 때 다른사람들도 코드를 읽고 이해할 수 있어야 한다.</li>
  <li>효율적인 프로그램을 작성하는 방법
    <ol>
      <li>적절한 알고리즘과 자료구조를 선택해야한다.</li>
      <li>컴파일러가 효과적으로 최적화해서 효율적인 실행코드로 바꿀 수 있는 소스코드를 작성해야 한다.</li>
      <li>작업을 부분으로 나누어 멀티코어와 멀티프로ㅔ써의 조합을 갖는 컴퓨터에서 병렬로 계산한다.</li>
    </ol>
  </li>
  <li>프로그래머는 컴파일러를 도와서 쉽게 최적화될 수 있는 코드를 작성해야한다.
    <ol>
      <li>불필요한 작업 제거
        <ul>
          <li>불필요한 함수호출 제거</li>
          <li>조건 테스트 제거</li>
          <li>메모리 참조 제거</li>
        </ul>
      </li>
      <li>인스트럭션-수준 병렬성을 제공</li>
    </ol>
  </li>
</ul>

<h1 id="51-최적화-컴파일러의-능력과-한계">5.1 최적화 컴파일러의 능력과 한계</h1>
<ul>
  <li>컴파일러는 프로그래머의 코드를 자동으로 최적화 해준다.</li>
  <li>하지만 특정 코드는 컴파일러가 자동으로 최적화해줄 수 없다.
    <ul>
      <li>두 개의 포인터가 같은 메모리 위치를 가리킬 수 있는 경우(메모리 연결memory aliasing)</li>
      <li>함수 호출
        <ul>
          <li></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

:ET