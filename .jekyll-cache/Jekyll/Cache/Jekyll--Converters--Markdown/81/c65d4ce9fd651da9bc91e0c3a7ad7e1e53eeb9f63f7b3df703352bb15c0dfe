I"w<h1 id="chapter-03-프로그램의-기계수준-표현">Chapter 03. 프로그램의 기계수준 표현</h1>
<ul>
  <li>컴퓨터는 데이터를 처리하고, 메모리를 관리하고, 저장장치에 데이터를 읽거나 쓰고, 네트워크를 통해 통신하는 등의 하위 동작들을 인코딩한 연속되 바이트인 기계어 코드를 실행한다.</li>
  <li>컴파일러는 프로그램 언어의 규칙, 대상 컴퓨터의 인스트럭션 집합, 운영체제의 관례 등에 따라 기계어 코드를 생성한다.</li>
  <li>어셈블러 코드로 프로그램을 짤 때는 프로그래머가 계산을 하기 위해 사용해야 하는 저급 인스트럭션들을 명시해야 한다.</li>
  <li>기계어 코드를 배우면 컴파일러의 최적화 성능을 알 수 있으며, 코드에 내제된 비효율성을 분석할 수 있다.</li>
  <li>이 장은 X86-64에 기초하고 있다.</li>
</ul>

<p><br /><br /></p>

<h1 id="31-역사적-관점">3.1 역사적 관점</h1>
<ul>
  <li>x86이라고 통칭하는 인텔 프로세서 제품군은 오랜 기간 진화를 통한 개발을 해왔다.
    <blockquote>
      <p>대충 엄청 많은 프로세서들이 나열 되는데, 팬티엄4E(2004, 125M 트랜지스터) 하이퍼쓰레딩 기법의 추가와 AMD사에서 개발한 IA32의 64비트 확장 구현인 EM64T가
추가된 해당 모델을 x86-64라고 부른다고 한다.</p>
    </blockquote>
  </li>
</ul>

<h1 id="32-프로그램의-인코딩">3.2 프로그램의 인코딩</h1>

<h1 id="33-데이터의-형식">3.3 데이터의 형식</h1>

<h1 id="34-정보-접근하기">3.4 정보 접근하기</h1>
:ET