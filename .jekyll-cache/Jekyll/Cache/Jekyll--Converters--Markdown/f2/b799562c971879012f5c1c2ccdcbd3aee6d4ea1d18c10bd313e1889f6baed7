I"<h1 id="part5-io">Part5 IO</h1>

<h2 id="자바io">자바IO</h2>
<p>입출력을 위한 인터페이스와 클래스들</p>
<ul>
  <li>자바 IO는 크게 byte단위 입출력과 문자 단위 이출력 클래스로 나뉜다.
    <ul>
      <li>byte단위 입출력클래스는 모두 InputStream과 OutputStream이라는 추상클래스를 상속받아 만들어진다.</li>
      <li>문자(char)단위 입출력클래스는 모두 Reader와 Writer라는 추상클래스를 상속받아 만들어진다.</li>
    </ul>
  </li>
  <li>4가지 추상클래스(InputStream, OutputStreamReader,Reader,Writer)를 받아들이는 생성자가 있다면, 다양한 입출력방법을 제공하는 클래스다.</li>
  <li>4가지 클래스를 받아들이는 생성자가 없다면, 어디로부터 입력받을 것인지, 어디에 쓸것인지를 나타내는 클래스다.</li>
  <li>파일로부터 입력받고 쓰기 위한 클래스 : FileInputStream, FileOutputStream, FileReader, FileWriter</li>
  <li>배열로부터 입력받고 쓰기 위한 클래스 : ByteArrayInputStream, ByteArrayOutputStream, CharReader, CharWriter
    <ul>
      <li>해당 클래스들은 어디로부터, 어디에라는 대상을 지정할 수 있는 IO클래스다. 이런 클래스를 장식대상 클래스라고 한다.</li>
    </ul>
  </li>
  <li>DataInputStream, DataOutputStream같은 클래스를 보면 다양한 데이터 형을 입력받고 출력한다.</li>
  <li>PrintWriter는 다양하게 한줄 입력받는 readLine() 메소드를 가진다.</li>
  <li>BufferedReader는 한줄 입력받는 readLine() 메소드를 가진다.
    <ul>
      <li>이런 클래스들은 다양한 방식으로 입력하고, 출력하는 기능을 제공한다. 이런 클래스를 장식하는 클래스라고 한다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/java/13/img.png" width="100%" height="100%" />
<img src="../../assets/img/java/13/img_1.png" width="100%" height="100%" /></p>

<blockquote>
  <p>데코레이터 패턴(Decorator Pattern) : 하나의 클래스를 장식 하는 것처럼 생성자에서 감싸서 새로운 기능을 계쏙 추가 할 수 있도록 클래스를 만드는 방식</p>
</blockquote>

<h2 id="byte-단위-입출력">Byte 단위 입출력</h2>
<p>Byte 단위 입출력 클래스는 클래스의 이름이 InputStream 이나 OutputStream으로 끝난다.</p>
<ul>
  <li>파일로부터 1byte씩 읽어들여 파일에 1byte씩 저장하는 프로그램을 작성
    <ul>
      <li>파일로부터 읽어오기 위한 객체 - FileInputStream</li>
      <li>파일에 쓸 수 있게 해주는 객체 - FileOutputStream</li>
    </ul>
  </li>
  <li>read() 메소드
    <ul>
      <li>byte를 리턴한다면 끝을 나타내는 값을 표현할 수가 없기때문에, byte가 아닌 int를 리턴한다.</li>
      <li>음수의 경우 맨 좌측 비트가 1이 된다. 읽어들일 것이 있다면 항상 양수를 리턴한다고 볼 수 있다.</li>
    </ul>
  </li>
  <li>FileInputStream과 FileOutputStream을 이용하여, 1바이트씩 읽어들여 1바이트씩 저장
    <ul>
      <li>read()메소드가 리턴하는 타입은 정수인데, 정수 4바이트중 마지막 바이트에 읽어들인 1바이트를 저장한다.</li>
      <li>read()메소드는 더이상 읽어들일 것이 없을 때 -1을 리턴한다.</li>
    </ul>
  </li>
</ul>

<h2 id="byte-단위-입출력-심화">Byte 단위 입출력 심화</h2>

<h2 id="다양한-타입의-출력">다양한 타입의 출력</h2>

<h2 id="다양한-타입의-입력">다양한 타입의 입력</h2>

<h2 id="char-단위-입출력console">Char 단위 입출력(Console)</h2>

<h2 id="char-단위-입출력file">Char 단위 입출력(File)</h2>

<h1 id="part6-어노테이션">Part6 어노테이션</h1>

<h2 id="어노테이션">어노테이션</h2>
:ET