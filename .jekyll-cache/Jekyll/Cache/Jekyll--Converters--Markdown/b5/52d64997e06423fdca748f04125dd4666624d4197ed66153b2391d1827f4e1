I"g<h1 id="chapter-03-프로그램의-기계수준-표현">Chapter 03. 프로그램의 기계수준 표현</h1>
<ul>
  <li>3.1 역사적 관점</li>
  <li>3.2 프로그램의 인코딩</li>
  <li>3.3 데이터의 형식</li>
  <li>3.4 정보 접근하기</li>
  <li>3.5 산술연산과 논리연산</li>
  <li>3.6 제어문</li>
  <li>3.7 프로시져</li>
  <li>3.8 배열의 할당과 접근</li>
  <li>3.9 이기종 자료구조</li>
  <li>3.10 기계수준 프로그램에서 제어와 데이터의 결합</li>
</ul>

<h1 id="39-이기종-자료구조">3.9 이기종 자료구조</h1>

<ul>
  <li>C는 서로 다른 유형의 객체를 연결해서 자료형을 만드는 두 가지 방법을 제공한다.
    <ul>
      <li>struct 키워드를 사용해서 선언하는 구조체
        <ul>
          <li>다수의 객체를 하나의 단위로 연결한다.</li>
        </ul>
      </li>
      <li>union으로 선언하는 공용체
        <ul>
          <li>하나의 객체를 여러 개의 다른 자료형으로 참조될 수 있도록 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="391-구조체">3.9.1 구조체</h2>

<ul>
  <li>서로 다른 유형의 객체들을 하나의 객체로 묶어주는 자료형을 생성한다.</li>
  <li>구조체의 구현은 구조체의 모든 컴포넌트들이 메모리의 연속된 영역에 저장된다.</li>
  <li>구조체의 포인터가 첫 번째 바이트의 주소라는 점에서 배열과 유사하다.</li>
</ul>

<p><img src="../../assets/img/csapp/10/img.png" width="100%" height="100%" /></p>

<h2 id="392-공용체">3.9.2 공용체</h2>

<ul>
  <li>C언어의 자료형 체제를 회피해서 하나의 객체가 다수의 자료형에 따라 참조될 수 있도록 해준다.</li>
  <li>공용체를 선언하는 문법은 구조체와 동일하나 그 의미는 매우 다르다.
    <ul>
      <li>다른 필드들이 메모리의 다른 블록을 참조하는 것이 아니라 동일한 블록을 참조한다.</li>
    </ul>
  </li>
</ul>

<h2 id="393-데이터의-정렬">3.9.3 데이터의 정렬</h2>

<ul>
  <li>많은 컴퓨터 시스템들은 기본 자료형들에 대해 사용 가능한 주소를 제한하고 있어서 어떤 객체의 주소는 어떤 값 K의 배수가 되도록 요구한다.</li>
  <li>이러한 정렬제한은 프로세서와 메모리 시스템 간의 인터페이스를 구성하는 하드웨어의 설계를 단순화한다.</li>
  <li>이들의 정렬 규칙은 모든 K의 원시 객체들은 K의 배수를 주소로 가져야 한다는 원칙에 기초한다.</li>
  <li>정렬은 자료형 내의 모든 객체들이 각각의 정렬 제한사항을 만족하는 방법으로 조직되고 할당되도록 강요된다.</li>
  <li>아래의 그림처럼 컴파일러는 c와 j 사이에 3바이트 공간을 삽입한다.
<img src="../../assets/img/csapp/10/img_1.png" width="100%" height="100%" /></li>
</ul>

<p><img src="../../assets/img/csapp/10/img_2.png" width="100%" height="100%" /></p>

<ul>
  <li>추가로, 컴파일러는 구조체의 마지막에 0을 채워서 구조체 배열에서 각 원소가 각각의 정렬 요건을 만족하도록 해준다.</li>
</ul>

<h1 id="310-기계수준-프로그램에서-제어와-데이터의-결합">3.10 기계수준 프로그램에서 제어와 데이터의 결합</h1>

<h2 id="3101-포인터-이해하기">3.10.1 포인터 이해하기</h2>

<h2 id="3102-실제-적용하기-gdb-디버거-사용하기">3.10.2 실제 적용하기: GDB 디버거 사용하기</h2>

<h2 id="3103-범위를-벗어난-메모리-참조와-버퍼-오버플로우">3.10.3 범위를 벗어난 메모리 참조와 버퍼 오버플로우</h2>

<h2 id="3104-버퍼-오버플로우-공격-대응-기법">3.10.4 버퍼 오버플로우 공격 대응 기법</h2>

<h2 id="3105-가변크기-스택-프레임-지원하기">3.10.5 가변크기 스택 프레임 지원하기</h2>

:ET