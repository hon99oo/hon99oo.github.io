I"<h1 id="chapter-07-링커">Chapter 07. 링커</h1>
<ul>
  <li>링킹은 여러 개의 코드와 데이터를 모아서 연결하여 메모리에 로드될 수 있고 실행될 수 있는 한 개의 파이로 만드는 작업이다.
    <ul>
      <li>링킹은 컴파일 시에 수행할 수 있다.</li>
      <li>로더에 의해 로드 타임에, 응용프로그램에 의해 실행 시에도 수행될 수 있다.</li>
    </ul>
  </li>
  <li>링커는 소프트웨어 개발 시에 중요한 역할: 독립적인 컴파일을 가능하게 하기 때문이다.</li>
  <li>링커를 배우는 이유
    <ul>
      <li>큰 프로그램을 작성하는 데 도움이 된다.</li>
      <li>위험한 프로그래밍 에러를 피할 수 있다.</li>
      <li>어떻게 언어의 변수 영역 규칙이 구현되었는지 이해하는 데 도움이 된다.</li>
      <li>다른 중요한 시스템 개념을 이해할 수 있게 된다.</li>
      <li>공유 라이브러리에 대해 이해할 수 있다.</li>
    </ul>
  </li>
</ul>

<h1 id="71-컴파일러-드라이버">7.1 컴파일러 드라이버</h1>
<ul>
  <li>대부분의 컴파일 시스템은 사용자를 대신해서 언어 전처리기, 컴파일러, 어셈블러, 링커를 필요에 따라 호출하는 컴파일러 드라이버를 제공한다.</li>
  <li>컴파일 순서
    <ol>
      <li>C 전처리기(cpp)로 main.c -&gt; ASCII 중간 파일인 main.i로 번역</li>
      <li>C 컴파일러(cc1)로 main.i -&gt; ASCII 어셈블리 언어 파일인 main.s로 번역</li>
      <li>어셈블러(as)로 main.s -&gt; 재배치 가능한 바이너리 목적파일인 main.o로 번역</li>
      <li>링커(ld)로 main.o &amp; sum.o 두개를 연결 -&gt; 실행 가능 목적파일 prog 생성</li>
      <li>로더라고 부르는 운영체제 내의 함수를 호출 -&gt; 로더는 실행파일 prog의 코드와 데이터를 메모리로 복사하고, 제어를 프로그램의 시작 부분으로 전환한다.</li>
    </ol>
  </li>
</ul>

<p><img src="../../assets/img/csapp/23/img.png" width="50%" height="100%" /></p>

<h1 id="72-정적연결">7.2 정적연결</h1>
<ul>
  <li>정적 링커는 재배치 가능한 목적파일들과 명령줄 인자들을 받아들여 로드될 수 있고 실행될 수 있는 완전히 링크된 실행 가능 목적파일을 생성한다.</li>
  <li>실행파일을 만들기 위해서 링커는 두 가지 주요 작업을 수행한다.
    <ol>
      <li>심볼 해석 symbol resolutions: 각각의 심볼 참조를 정확하게 하나의 심볼 정의에 연결하는 것이다.</li>
      <li>재배치 Relocation: 링커는 섹션들을 각 심볼 정의와 연결시켜 재배치한다.</li>
    </ol>
  </li>
</ul>

<h1 id="73-목적파일">7.3 목적파일</h1>
<ul>
  <li>세가지 목적파일이 있다.
    <ul>
      <li>재배치 가능 목적파일 Relocatable object file: 다른 재구성가능 목적파일들과 결합될 수 있는 바이너리 코드와 데이터를 포함</li>
      <li>실행 가능 목적파일 Executable object file: 메모리에 직접 복사될 수 있고 실행될 수 있음</li>
      <li>공유 목적파일 Shared object file: 로드타임 또는 런타임 시에 동적으로 링크되고 로드될 수 있는 목적파일</li>
    </ul>
  </li>
  <li>컴파일러와 어셈블러는 재배치 가능 목적파일을 생성, 링커는 실행 가능한 목적파일을 생성</li>
</ul>

<h1 id="74-재배치-가능-목적파일">7.4 재배치 가능 목적파일</h1>

<p><img src="../../assets/img/csapp/23/img_1.png" width="50%" height="100%" /></p>
<ul>
  <li>위의 그림은 전형적인 ELF(Executable and Linkable Format) 재배치 가능 목적파일의 포맷이다.
    <ul>
      <li>.text: 컴파일된 프로그램의 머신 코드</li>
      <li>.rodata: printf 문장의 포맷 스트링</li>
      <li>.data: 초기화된 전역변수 및 정적변수</li>
      <li>.bss: 초기화되지 않은 또는 0으로 초기화된 전역변수 및 정적변수</li>
      <li>.symtab: 프로그램에서 정의되고 참조되는 전역변수들과 함수에 대한 정보를 가지고 있는 심볼 테이블</li>
      <li>.rel.text: 다른 목적 파일들과 연결할 때 링커가 수정해야하는 .text 섹션 내 위치들의 리스트</li>
      <li>.rel.data: 전역변수들에 대한 재배치 정보</li>
      <li>.debug: 프로그램 내에서 정의된 지역변수들과 typedef</li>
      <li>.line: 최초 소스 프로그램과 .text 섹션 내 머신 코드 인스트럭션 내 라인 번호들간의 매핑</li>
      <li>.strtab: 섹션 이름들을 위한 스트링 테이블</li>
    </ul>
  </li>
</ul>

<h1 id="75-심볼과-심볼-테이블">7.5 심볼과 심볼 테이블</h1>
<ul>
  <li>재배치 가능 목적 모듈 m은 m에 의해서 정의되고 참조되는 심볼들에 대한 정보를 포함하는 심볼 테이블을 가지고 있다.
    <ul>
      <li>m에 의해 정의되고 다른 모든 모듈들에 의해서 참조될 수 있는 전역 심볼
        <ul>
          <li>전역</li>
        </ul>
      </li>
      <li>m에 의해 참조되지만 다른 모듈에 의해 정의된 전역 심볼
        <ul>
          <li>external</li>
        </ul>
      </li>
      <li>m에 의해서 배타적으로 참조되고 정의된 지역 심볼
        <ul>
          <li>static
            <blockquote>
              <p>지역 변수는 런타임에 스택에 의해서 관리되며 링커에는 관심거리가 아니다.</p>
            </blockquote>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET