I"L"<h1 id="boj">BOJ</h1>

<h2 id="그리디-1260-dfs와-bfs">그리디 1260 DFS와 BFS</h2>
<p><a href="https://www.acmicpc.net/problem/1260">문제로 이동!</a></p>

<h2 id="문제">문제</h2>

<p>그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</p>

<h2 id="예제-입력">예제 입력</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python">    <span class="s">"""
    case 1:
    입력
    4 5 1
    1 2
    1 3
    1 4
    2 4
    3 4
    출력
    1 2 4 3
    1 2 3 4

    case 2:
    입력
    5 5 3
    5 4
    5 2
    1 2
    3 4
    3 1  
    출력
    3 1 2 5 4
    3 1 4 2 5
    """</span></code></pre></figure>

<h2 id="풀이">풀이</h2>
<blockquote>
  <p>DFS와 BFS를 사용하면 간단히 풀 수 있는 문제이다. 하지만, 입력값으로부터 인접리스트 그래프를 만들 때 들어가는 인자값을 sorting을 해주어야 정확한 순서로 그래프를 탐색한다.</p>
</blockquote>

<h3 id="solution">solution</h3>
<ol>
  <li>bfs와 dfs 함수를 정의한다.</li>
  <li>인접리스트 graph를 초기화한다.</li>
  <li>입력값을 저장하고 해당 리스트를 정렬한다.</li>
  <li>bfs와 dfs 함수를 호출해 정답을 도출한다.</li>
</ol>

<h2 id="새로-배운점">새로 배운점</h2>
<ul>
  <li>리스트에 *을 붙여서 print하면 c언어 처럼 출력된다.</li>
  <li>graph 인접리스트를 만들 때 heapq로 생성하면 리스트 후 정렬 하는 것보다 성능이 아주 조금 더 좋다.</li>
</ul>

<h2 id="코드">코드</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python">    <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
    
    
    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
        <span class="n">visited_dfs</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">order_dfs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">v</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited_dfs</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    
    
    <span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
        <span class="n">visited_bfs</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">order_bfs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
        <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="n">v</span><span class="p">])</span>
        <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">visited_bfs</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                    <span class="n">visited_bfs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">order_bfs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                    <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    
    
    <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
        <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">graph</span><span class="p">.</span><span class="n">append</span><span class="p">([])</span>
    
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">sort</span><span class="p">()</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">sort</span><span class="p">()</span>
    
    
        <span class="n">visited_dfs</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">order_dfs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">visited_bfs</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">order_bfs</span> <span class="o">=</span> <span class="p">[]</span>
    
        <span class="n">dfs</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">order_dfs</span><span class="p">)</span>
        <span class="n">bfs</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">order_bfs</span><span class="p">)</span></code></pre></figure>
:ET