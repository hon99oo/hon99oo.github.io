I"<h1 id="1-락">1. 락</h1>
<ul>
  <li>여러 개의 명령어들을 원자적으로 실행해보고 싶지만 단일 프로세서의 인터럽트로 인해서(또는 멀티 쓰레드를 여러 프로세서에 병행성하려고 해서) 그렇게 할 수가 없었다.</li>
  <li>프로그래머들은 소스 코드의 임계 영역을 <strong>락(lock)</strong>으로 둘러서 그 임계 영역이 마치 하나의 원자 단위 명령어인 것처럼 실행되도록 한다.</li>
</ul>

<h1 id="11-락-기본-개념">1.1 락: 기본 개념</h1>
<ul>
  <li>락은 일종의 변수다.</li>
  <li>락을 사용하기 위해서는 락 변수를 먼저 선언해야 한다.</li>
  <li>이 <strong>락 변수</strong>는 락의 상태를 나타낸다.</li>
  <li>락은 둘중 하나의 상태를 갖는다.
    <ol>
      <li><strong>사용 가능(available)</strong> 상태 (<strong>unlockedf</strong> 또는 <strong>free</strong>)
        <ul>
          <li>즉 어떤 쓰레드도 락을 소유하고 있지 않다.</li>
        </ul>
      </li>
      <li><strong>사용 중(acquired)</strong> 상태
        <ul>
          <li>즉 임계 영역에서 정확히 하나의 쓰레드가 락을 <strong>획득</strong>한 상태이다.</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<p><br /></p>
<ul>
  <li>lock() 루틴 호출을 통해 락 획득을 시도한다.
    <ul>
      <li>이렇게 락을 획득한 쓰레드를 <strong>소유자(owner)</strong>라고 부른다.</li>
      <li>락을 소유한 쓰레드가 임계 영역에 존재하는 상태에서는 다른 쓰레드들이 임계 영역으로 진입할 수 없다.</li>
    </ul>
  </li>
  <li>락 소유자가 unlock()을 호출한다면 락은 이제 다시 사용 가능한 상태가 된다.</li>
</ul>

<p><br /></p>
<ul>
  <li>일반적으로 쓰레드는 프로그래머가 생성하고 운영체제가 제어한다.</li>
  <li>락으로 코드를 감싸서 프로그래머는 크 코드 내에서는 하나의 쓰레드만 동작하도록 보장할 수 있다.</li>
</ul>

<h2 id="12-pthread-락">1.2 Pthread 락</h2>
<ul>
  <li>쓰레드 간에 <strong>상호 배제(mutual exclusion)</strong> 기능을 제공하기 때문에 POSIX 라이브러리는 락을 <strong>mutex</strong>라고 부른다.</li>
  <li>상호 배제는 한 쓰레드가 임계 영역 내에 있다면 이 쓰레드의 동작이 끝날 때까지 다른 쓰레드가 임계 영역에 들어 올 수 없도록 제한한다고해서 얻은 이름이다.</li>
  <li>각 데이터와 자료 구조를 보호하는 데 있어서, 여러 락을 사용한다.</li>
</ul>

<h2 id="13-락의-평가">1.3 락의 평가</h2>
<ul>
  <li>락 설계시, 락의 정상동작 여부 판단을 위한 평가기준을 정해야 한다.
    <ol>
      <li><strong>상호 배제</strong>를 제대로 지원하는가이다.</li>
      <li><strong>공정성(fairness)</strong>
        <ul>
          <li>락을 전혀 얻지 못해 <strong>굶주리는(starve)</strong> 경우가 발생하는지를 판단해야한다.</li>
        </ul>
      </li>
      <li><strong>성능(performance)</strong>이다.</li>
    </ol>
  </li>
</ul>

<blockquote>
  <p>이제부터 1.4절부터 락을 구현하는 여러가지 방법에 대해 알아볼 것이다. 스핀락부터 스핀을 사용하지 않는 락까지 알아본다.</p>
</blockquote>

<h2 id="14-인터럽트-제어">1.4 인터럽트 제어</h2>
<ul>
  <li>초창기 단일 프로세스 시스템에서는 상호 배제 지원을 위해 임계 영역 내에서는 인터럽트를 비활성화하는 방법을 사용했다.</li>
</ul>

<figure class="highlight"><pre><code class="language-c" data-lang="c">  
    <span class="kt">void</span> <span class="nf">lock</span><span class="p">(){</span>
        <span class="n">DisableInterrupts</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="nf">unlock</span><span class="p">(){</span>
        <span class="n">EnableInterrupts</span><span class="p">();</span>
    <span class="p">}</span></code></pre></figure>
:ET