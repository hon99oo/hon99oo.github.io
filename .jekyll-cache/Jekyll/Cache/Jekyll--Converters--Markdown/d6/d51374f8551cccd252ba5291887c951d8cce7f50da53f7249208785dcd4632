I"h:<h1 id="chapter-04-프로세서-구조">Chapter 04. 프로세서 구조</h1>
<ul>
  <li>4.1 Y86-64 인스트럭션 집합 구조</li>
  <li>4.2 논리 설계와 하드웨어 제어 언어 HCL</li>
  <li>4.3 순차적sequential Y86-64 구현</li>
  <li>4.4 파이프라이닝의 일반 원리</li>
  <li>4.5 파이프라인형 Y86-64의 구현</li>
</ul>

<h1 id="45-파이프라인형-y86-64의-구현">4.5 파이프라인형 Y86-64의 구현</h1>
<ul>
  <li>순차적 프로세서 SEQ를 약간 변형해서 PC의 계산을 선입 단계로 이동하는 것으로 프로세서를 변경한다.</li>
  <li>이후 파이프라인 레지스터들을 단계별로 추가한다.</li>
</ul>

<blockquote>
  <p>결국은 이 파이프라인형 Y86-64 “PIPE”를 만들기 위해 2장부터 4장까지 달려온 것이다.<br />
우선 컴퓨터가 해석할 수 있는 정수와 부동소수점 표현과 기본 산술에 대해서 2장에서 배웠고,<br />
3장에서는 프로그래머가 작성한 코드를 컴퓨터가가 해석할 수 있는 기계어로 변경하는 것을 배웠고,<br />
4장 초반에서는 해당 기계어를 컴퓨터가 해석할 수 있도록 인스트럭션 집합으로 변경하는 것을 배웠고,<br />
4장 후반 SEQ 구현에서는 해당 인스트럭션을 컴퓨터가 어떻게 해석하는지를 배웠고,<br />
4장 후반 파이프라인 구현에서는 인스트럭션을 해석하는데에 있어 속도를 증가시키기 위해서 SEQ에 파이프라인을 구축하고,
파이프라인 구축할 때의 예외처리를 다룬 뒤 프로세서를 완성시킨다.</p>
</blockquote>

<h2 id="451-seq-계산-단계들을-재배치하기">4.5.1 SEQ+: 계산 단계들을 재배치하기</h2>
<ul>
  <li>PC 갱신 단계가 클럭 사이클의 마지막이 아니라 맨 처음에 오도록 한다.
    <ul>
      <li>파이프라인 단계에서의 순차적인 동작을 더 잘 수행할 수 있다.</li>
      <li>수정된 설계를 “SEQ+”라고 부른다.</li>
    </ul>
  </li>
</ul>

<p><br /><br />
<img src="../../assets/img/csapp/18/img.png" width="70%" height="100%" /></p>
<ul>
  <li>위의 그림은 PC 계산 타이밍의 변경이다.
    <ul>
      <li>SEQ+에서 인스트럭션 실행의 첫 단계로 현재 상태에 대한 프로그램 카운터 값을 계산한다.</li>
    </ul>
  </li>
</ul>

<h2 id="452-파이프라인-레지스터의-삽입">4.5.2 파이프라인 레지스터의 삽입</h2>
<ul>
  <li>SEQ+의 단계들간에 파이프라인 레지스터들을 삽입하였으며 신호들을 재배치해서 PIPE- 프로세서를 만들었다.</li>
  <li>파이프라인 레지스터들은 다음과 같이 명명하였다
    <ul>
      <li>F : 프로그램 카운터의 예측 값을 저장한다.</li>
      <li>D : 선입과 해동 단계 사이에 위치한다. 해독 단계가 처리하기 위해서 가장 최근에 선입한 인스트럭션에 관한 정보를 저장한다.</li>
      <li>E : 해독과 실행 단계 사이에 위치한다. 실행 단계가 처리하기 위해서 레지스터 파일로부터 읽어들인 값과 가장 최근에 해독한 인스트럭션에 관한 정보를 저장한다.</li>
      <li>M : 실행과 메모리 단계 사이에 위치한다. 메모리 단계가 처리하기 위한 가장 최근에 실행 인스트럭션 결과와 조건부에 관한 정보를 저장한다.</li>
      <li>W : 레지스터 파일에 기록을 위한 결과, 리턴주소, PC 선택 로직을 저장한다.</li>
    </ul>
  </li>
</ul>

<p><br /><br />
<img src="../../assets/img/csapp/18/img_1.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 그림은 SEQ+ 하드웨어 구조</li>
</ul>

<p><br /><br />
<img src="../../assets/img/csapp/18/img_2.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 그림은 PIPE- 의 하드웨어 구조, 초기 파이프라인 구현</li>
</ul>

<p><br /><br />
<img src="../../assets/img/csapp/18/img_3.png" width="70%" height="100%" /></p>
<ul>
  <li>위의 그림은 코드 배열이 어떻게 5단계 파이프라인을 통해 흘러가는지를 보여준다.</li>
</ul>

<h2 id="453-신호의-재배치와-재명명">4.5.3 신호의 재배치와 재명명</h2>
<ul>
  <li>SEQ에서는 한 번에 한 개의 인스트럭션만을 처리했지만, 파이프라인 설계에서는 인스트럭션에 연계된 여러 버전의 값이 존재한다.</li>
  <li>PIPE-의 상세 설계에서 네 개의 서로 다른 인스트럭션을 위한 상태코드를 저장하는 “Stat”이 있다.</li>
  <li>파이프라인 레지스터의 이름은 대문자를 사용한다. D_stat, E_stat, M_stat, W_stat</li>
  <li>계산된 일부 신호의 이름은 소문자를 사용한다 f_stat, m_stat</li>
  <li>전체 프로세서의 실제 상태 Stat이 파이프라인 레지스터 W에 기록된 상태값에 따라 재기록 단계에서 계산된다.</li>
  <li>일반적인 원칙으로 특정 인스트럭션에 관한 모든 정보를 한 개의 파이프라인 단계 내에 유지하는 것을 원한다.</li>
</ul>

<h2 id="454-다음-pc-값의-추정">4.5.4 다음 PC 값의 추정</h2>
<ul>
  <li>파이프라인 설계의 목표는 매 클럭 사이클마다 새로운 인스트럭션을 실행하는 것이며, 새 인스트럭션이 실행 단계로 진행해서 궁극적으로는 완료되는 것을 의미한다.</li>
  <li>리턴이나 조건부 점프 인스트럭션은 선입 단계에 계산된 정보를 사용해서 다음 인스트럭션의 주소를 결정할 수 없다.</li>
  <li>따라서 매 클럭 사이클마다 하나의 새 인스트럭션을 실행하려는 우리의 목표를 달성하기 위해서 대부분의 경우에 PC의 새로운 값을 예측해야 한다.
    <blockquote>
      <p>이부분이 처음에 조금 이해가 안됐지만, 파이프라인 해저드를 공부하고 이해가 됐다. 해저드를 통해 이러한 분기예측을 제어한다.</p>
    </blockquote>
  </li>
  <li>분기의 방향을 추측하고 추측 결과에 따라 인스트럭션을 선입하는 기술을 분기예측branch prediction 이라고 한다.</li>
</ul>

<h2 id="455-파이프라인-해저드">4.5.5 파이프라인 해저드</h2>
<ul>
  <li>피드백이 있는 시스템에 파이프라인을 도입하면 연속되는 인스트럭션들 간에 의존성이 존재할 때 문제가 발생할 수 있다.</li>
  <li>의존성은 두 가지 형태를 띈다.
    <ul>
      <li>데이터 의존성: 한개의 인스트럭션이 계산한 결과가 다음에 오는 인스트럭션을 위한 데이터로 사용되는 경우</li>
      <li>제어 의존성: jump, call, ret와 같이 한 개의 인스트럭션이 다음에 따라오는 인스트럭션의 위치를 결정하는 경우</li>
    </ul>
  </li>
  <li>의존성들이 파이프라인으로 인해 잘못된 계산을 야기할 가능서이 있을 때 해저드라고 부른다.</li>
  <li>해저드 또한 데이터 해저드, 제어 해저드로 구분할 수 있다.</li>
</ul>

<p><br /></p>

<h3 id="특별한-파이프라인-제어-없는-경우의-파이프라인-실행에러x">특별한 파이프라인 제어 없는 경우의 파이프라인 실행(에러X)</h3>
<p><img src="../../assets/img/csapp/18/img_4.png" width="70%" height="100%" /></p>

<h3 id="특별한-파이프라인-제어-없는-경우의-파이프라인-실행에러o">특별한 파이프라인 제어 없는 경우의 파이프라인 실행(에러O)</h3>
<p><img src="../../assets/img/csapp/18/img_5.png" width="70%" height="100%" /></p>

<h3 id="스톨을-사용한-데이터-해저드의-회피">스톨을 사용한 데이터 해저드의 회피</h3>
<p><img src="../../assets/img/csapp/18/img_6.png" width="70%" height="100%" /></p>

<p><br />
<img src="../../assets/img/csapp/18/img_7.png" width="70%" height="100%" /></p>

<ul>
  <li>해저드를 회피하는 매우 일반적인 기술은 프로세서가 하나 또는 여러 인스트럭션을 해저드 조건이 사라질 때까지 파이프라인 내에 유지하는 스톨과 관련된다.</li>
  <li>해독 단계에서 인스트럭션을 소스 오퍼랜드를 생성하는 인스트럭션들이 재기록 단계를 통과할 때까지 스톨시키는 방법으로 데이터 해저드를 회피할 수 있다.</li>
  <li>스톨링은 한 그룹의 인스트럭션들을 이들의 단계에 붙잡아두지만, 다른 인스트럭션들은 파이프라인을 계속 흘러가도록 한다.</li>
  <li>인스트럭션을 해독단계에 붙잡아 놓을 때마다 실행 단계에 버블을 삽입하는 방식으로 처리한다.</li>
  <li>버블은 동적으로 생성된 nop 인스트럭션과 비슷하다.</li>
</ul>

<h3 id="포워딩forwarding을-이용한-데이터-해저드의-회피">포워딩Forwarding을 이용한 데이터 해저드의 회피</h3>
<p><img src="../../assets/img/csapp/18/img_8.png" width="70%" height="100%" /></p>

<p><br />
<img src="../../assets/img/csapp/18/img_9.png" width="70%" height="100%" /></p>

<ul>
  <li>재기록 단계에서 이들 소스 레지스터 중의 하나에 대기하고 있는 쓰기 작업이 존재할 수 있다.</li>
  <li>쓰기 작업이 완료될 때까지 스톨하기보다는 소스 오퍼랜드로 파이프라인 레지스터 E에 기록될 값을 단순히 전달할 수 있다.</li>
  <li>데이터 포워딩은 메모리 단계에서 대기하고 있는 레지스터 쓰기 작업이 있을 때에도 사용될 수 있다.</li>
  <li>위 그림은 해독 단계 로직이 레지스터 파일에서 온 값을 사용할지, 포워딩된 값을 사용할지 여부를 어떻게 결정할 수 있는지 보여준다.
    <ul>
      <li>레지스터 파일에 재기록되는 모든 값과 관련된 것은 목적지 레지스터 ID이다.</li>
      <li>이 로직은 이 ID들을 소스 레지스터 ID인 srcA, srcB와 비교해서 포워딩을 위한 경우를 검출할 수 있다.</li>
    </ul>
  </li>
  <li>다섯개의 포워딩 소스가 해독 단계에 “Sel+Fwd A”와 “Fwd B” 두 블록으로 피드백 된다.</li>
</ul>

<h3 id="로드사용-데이터-해저드">로드/사용 데이터 해저드</h3>
<p><br />
<img src="../../assets/img/csapp/18/img_10.png" width="90%" height="100%" /></p>

<ul>
  <li>메모리 읽기가 파이프라인의 뒷부분에서 일어나기 때문에 데이터 해저드는 순수하게 포워딩만 가지고는 처리할 수 없다.</li>
  <li>해당 경우는 스톨링과 포워딩을 함께 사용해서 로드/사용 데이터 해저드를 회피할 수 있다.</li>
  <li>로드/사용 해저드를 처리하기 위해 스톨을 사용하는 것을 로드 인터록load interlock이라고 부른다.</li>
  <li>포워딩과 결합된 로드 인터록은 가능한 모든 형태의 데이터 해저드를 충분히 처리할 수 있다.</li>
</ul>

<h3 id="제어-해저드의-회피">제어 해저드의 회피</h3>
<ul>
  <li>제어 해저드는 프로세서가 선입 단계에서 현재 인스트럭션에 기초하여 다음 인스트럭션의 주소를 안정적으로 결정할 수 없을 때 발생한다.</li>
  <li>제어 해저드는 ret와 점프 인스트럭션에 대해서만 발생할 수 있다.</li>
</ul>

<p><br />
<img src="../../assets/img/csapp/18/img_11.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 그림은 ret 인스트럭션 처리과정이다.
    <ul>
      <li>파이프라인은 ret가 해독, 실행, 메모리 단계를 통과하며 세개의 버블을 삽입하는 동안 스톨해야한다.</li>
      <li>PC 선택 로직은 ret가 재기록 단계에 도착하면(사이클 7) 인스트럭션 선입 주소로 리턴주소를 선택하게 된다.
<br /></li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/csapp/18/img_12.png" width="90%" height="100%" /></p>
<ul>
  <li>위의 그림은 잘못 예측한 분기 인스트럭션의 처리이다.
    <ul>
      <li>파이프라인은 분기를 할 것이라고 예측하고, 따라서 점프 목적지에서 인스트럭션 선입을 시작한다.</li>
      <li>점프 인스트럭션이 실행 단계를 통해 흘러갈 때 두 인스트럭션은 사이클 4에서 예측오류가 검출되기 전에 선입된다.</li>
      <li>사이클 5에서 파이프라인은 해독과 실행단계에 버블을 삽입해서 두 목적지 인스트럭션을 취소하고, 점프 다음에 오는 인스트럭션을 선입한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>
<ul>
  <li>간단히 두 개의 잘못 선입한 인스트럭션을 취소할 수 있다.
    <ul>
      <li>인스트럭션 스쿼싱squashing이라고 불린다.</li>
    </ul>
  </li>
  <li>programmers-visible state에는 아무런 영향을 주지 않지만 단점은 두 클럭 사이클 만큼의 인스트럭션 처리 능력이 낭비된다는 점이다.</li>
  <li>스톨링과 파이프라인에 버블을 삽입하는 기술들은 특수한 상황이 발생할 때 파이프라인의 흐름을 동적으로 조절한다.</li>
</ul>

<h2 id="456-예외처리">4.5.6 예외처리</h2>
<ul>
  <li>프로세서의 다양한 동작은 예외적인 제어흐름을 발생시키며, 이 경우 정상적인 프로그램 실행의 연결은 끊어진다.</li>
  <li>예외들은 프로그램 실행에 의해 내부적으로 발생하거나 외부 신호에 의해 외부적으로 생성될 수 있다.</li>
  <li>세 가지 서로 다른 내부 생성 예외
    <ol>
      <li>halt 인스트럭션에 의한 예외</li>
      <li>인스트럭션과 함수코드의 잘못된 조합을 갖는 인스트럭션</li>
      <li>인스트럭션 선입 또는 데이터 읽기나 쓰기를 위해 유효하지 않은 주소에 접근하려 하는 경우</li>
    </ol>
  </li>
  <li>프로세서가 예외를 만나면 정지하고 적절한 생태코드를 설정한다.</li>
  <li>프로세서는 운영체제의 일부인 예외핸들러라는 프로시저를 계속 호출한다.</li>
</ul>

<h3 id="파이프라인과-예외처리">파이프라인과 예외처리</h3>
<ul>
  <li>파이프라인을 사용한 시스템에서 예외처리는 여러 가지 미묘한 부분들이 관계되어 있다.
    <ol>
      <li>예외상황이 다수의 인스트럭션들에 의해 동시에 발생할 수 있다.</li>
    </ol>
    <ul>
      <li>기본 규칙은 파이프라인에서 가장 멀리 있는 인스트럭션이 유발한 예외상황에 우선순위를 둔다.</li>
    </ul>
  </li>
</ul>

<ol>
  <li>어떤 인스트럭션이 선입되고, 실행을 시작해서 예외를 발생시키고, 나중에 잘못 예측한 분기명령으로 인해 취소할 때 발생한다.
    <ul>
      <li>파이프라인 제어로직은 인스트럭션을 취소한다.</li>
    </ul>
  </li>
  <li>파이프라인 프로세서가 서로 다른 단계에서 시스템 상태의 서로 다른 부분을 갱신하기 때문에 발생한다.</li>
</ol>
:ET