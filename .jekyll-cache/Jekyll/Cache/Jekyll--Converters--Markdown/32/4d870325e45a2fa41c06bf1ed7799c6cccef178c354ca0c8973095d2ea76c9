I"J<h1 id="1-빈-공간-관리">1. 빈 공간 관리</h1>
<ul>
  <li>빈 공간 관리가 더 어렵고 흥미로운 경우는 관리하는 공간이 가변-크기 빈 공간들의 집합으로 구성되어 있는 경우이다.
    <ul>
      <li>malloc(), free(), 세그멘테이션으로 물리 메모리를 관리하는 운영체제에서 발생한다.</li>
    </ul>
  </li>
  <li>어느 경우에도 <strong>외부 단편화</strong>가 존재한다.
    <ul>
      <li>빈 공간은 다양한 크기의 작은 조각으로 분할되어 결국 단편화된다.</li>
    </ul>
  </li>
</ul>

<p><img src="../../assets/img/ostep/05/img.png" width="40%" height="100%" /></p>

<h1 id="11-가정">1.1 가정</h1>
<ul>
  <li>힙의 <string>빈 공간&lt;/strong&gt;을 관리하는 데는 일반적인 링크드리스트가 사용된다.
</string>    <ul>
      <li>이 자료 구조는 영역 내의 모든 빈 청크에 대한 주소를 갖고 있다.</li>
    </ul>
  </li>
</ul>

<h1 id="12-저수준-기법들">1.2 저수준 기법들</h1>
<ul>
  <li>대부분의 할당기에서 사용되는 일반적인 기법
    <ol>
      <li><strong>분할(splitting)</strong>과 <strong>병합(coalescing)</strong></li>
      <li>할당된 영역의 크기를 빠르고 상대적으로 쉽게 파악할 수 있는 방법</li>
      <li>빈 공간과 사용 중인 공간을 추적하기 위해 빈 공간 내에 간단한 리스트를 구현하는 방법</li>
    </ol>
  </li>
</ul>

<h2 id="분할과-병합">분할과 병합</h2>

<p><img src="../../assets/img/ostep/05/img_1.png" width="40%" height="100%" /></p>

:ET